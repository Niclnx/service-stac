openapi: 3.0.1
paths:
  "/collections":
    post:
      tags:
        - Data Management
      summary: >-
        Create a new collection
      operationId: createCollection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/collection"
            example:
              description: The National Map 1:200,000 is a topographic map giving an overview of Switzerland.
              id: ch.swisstopo.pixelkarte-farbe-pk200.noscale
              license: proprietary
              links:
                - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html
                  rel: license
                  title: Licence for the free geodata of the Federal Office of Topography swisstopo
                - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df
                  rel: describedby
              providers:
                - name: Federal Office of Topography - swisstopo
                  roles:
                    - producer
                    - licensor
                  url: https://www.swisstopo.admin.ch
              title: National Map 1:200'000
      responses:
        "201":
          description: Returns the created Collection
          headers:
            Location:
              description: A link to the collection
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/collection"
          $ref: "#/components/responses/Collection"
        "403":
          $ref: "#/components/responses/PermissionDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  "/collections/{collectionId}":
    put:
      tags:
        - Data Management
      summary: >-
        Update an existing collection with Id `collectionId` with a complete collection definition
      operationId: updateCollection
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/IfMatchWrite"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/collection"
            example:
              description: The National Map 1:200,000 is a topographic map giving an overview of Switzerland.
              id: ch.swisstopo.pixelkarte-farbe-pk200.noscale
              license: proprietary
              links:
                - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html
                  rel: license
                  title: Licence for the free geodata of the Federal Office of Topography swisstopo
                - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df
                  rel: describedby
              providers:
                - name: Federal Office of Topography - swisstopo
                  roles:
                    - producer
                    - licensor
                  url: https://www.swisstopo.admin.ch
              title: National Map 1:200'000
      responses:
        "200":
          description: Returns the updated Collection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/collection"
        "403":
          $ref: "#/components/responses/PermissionDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - Data Management
      summary: >-
        Update an existing collection with Id `collectionId` with a partial collection definition
      operationId: partialUpdateCollection
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/IfMatch"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/collection"
            example:
              id: ch.swisstopo.pixelkarte-farbe-pk200.noscale
              license: proprietary
              links:
                - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html
                  rel: license
                  title: Licence for the free geodata of the Federal Office of Topography swisstopo
                - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df
                  rel: describedby
              providers:
                - name: Federal Office of Topography - swisstopo
                  roles:
                    - producer
                    - licensor
                  url: https://www.swisstopo.admin.ch
              title: National Map 1:200'000
      responses:
        "200":
          description: Returns the updated Collection
          headers:
            ETag:
              schema:
                type: string
              description: A string to ensure the collection has not been modified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/collection"
        "403":
          $ref: "#/components/responses/PermissionDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "500":
          $ref: "#/components/responses/ServerError"
  "/collections/{collectionId}/items":
    post:
      summary: Add a new feature to a collection
      description: Create a new feature/item in a specific collection
      operationId: postFeature
      tags:
        - Data Management
      parameters:
        - $ref: "#/components/parameters/collectionId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createItem"
            example:
              type: Feature
              id: CS3-20160503_132131_05
              geometry:
                type: Polygon
                coordinates:
                  - - - -122.308150179
                      - 37.488035566
                    - - -122.597502109
                      - 37.538869539
                    - - -122.576687533
                      - 37.613537207
                    - - -122.2880486
                      - 37.562818007
                    - - -122.308150179
                      - 37.488035566
              properties:
                datetime: "2016-05-03T13:22:30.040Z"
                title: A CS3 item
                license: PDDL-1.0
                providers:
                  - name: CoolSat
                    roles:
                      - producer
                      - licensor
                    url: https://cool-sat.com/
                view:sun_azimuth: 168.7
                eo:cloud_cover: 0.12
                view:off_nadir: 1.4
                platform: coolsat2
                instruments:
                  - cool_sensor_v1
                view:sun_elevation: 33.4
              collection: CS3
              links:
                - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html
                  rel: license
                  title: Licence for the free geodata of the Federal Office of Topography swisstopo
                - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df
                  rel: describedby
      responses:
        "201":
          description: Return the created Item.
          headers:
            Location:
              description: A link to the item
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/PermissionDenied"
        "5XX":
          $ref: "#/components/responses/ServerError"
  "/collections/{collectionId}/items/{featureId}":
    put:
      summary: Update an existing feature by Id with a complete item definition
      description: >-
        Use this method to update an existing feature. Requires the entire
        JSON description be submitted.


        *NOTE: Optional fields that are not part of the PUT payload, will be erased in the
        resource. For example if the resource as a properties.title and the PUT payload doesn't, then
        the resource properties.title will be removed.*
      operationId: putFeature
      tags:
        - Data Management
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/featureId"
        - $ref: "#/components/parameters/IfMatchWrite"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateItem"
            example:
              type: Feature
              id: CS3-20160503_132131_05
              geometry:
                type: Polygon
                coordinates:
                  - - - -122.308150179
                      - 37.488035566
                    - - -122.597502109
                      - 37.538869539
                    - - -122.576687533
                      - 37.613537207
                    - - -122.2880486
                      - 37.562818007
                    - - -122.308150179
                      - 37.488035566
              properties:
                datetime: "2016-05-03T13:22:30.040Z"
                title: A CS3 item
                license: PDDL-1.0
                providers:
                  - name: CoolSat
                    roles:
                      - producer
                      - licensor
                    url: https://cool-sat.com/
                view:sun_azimuth: 168.7
                eo:cloud_cover: 0.12
                view:off_nadir: 1.4
                platform: coolsat2
                instruments:
                  - cool_sensor_v1
                view:sun_elevation: 33.4
              collection: CS3
              links:
                - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html
                  rel: license
                  title: Licence for the free geodata of the Federal Office of Topography swisstopo
                - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df
                  rel: describedby
      responses:
        "200":
          description: Returns the updated Item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/PermissionDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "5XX":
          $ref: "#/components/responses/ServerError"
    patch:
      summary: Update an existing feature by Id with a partial item definition
      description: >-
        Use this method to update an existing feature. Requires a JSON
        fragment (containing the fields to be updated) be submitted.
      operationId: patchFeature
      tags:
        - Data Management
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/featureId"
        - $ref: "#/components/parameters/IfMatchWrite"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/partialItem"
      responses:
        "200":
          description: Returns the updated Item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/PermissionDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "5XX":
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete an existing feature by Id
      description: Use this method to delete an existing feature/item.
      operationId: deleteFeature
      tags:
        - Data Management
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/featureId"
        - $ref: "#/components/parameters/IfMatchWrite"
      responses:
        "200":
          $ref: "#/components/responses/DeletedResource"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "5XX":
          $ref: "#/components/responses/ServerError"
  "/collections/{collectionId}/items/{featureId}/assets":
    get:
      description: >-
        Fetch assets of the item with id `featureId`.

        Every asset belongs to an item.
      operationId: getAssets
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/featureId"
      responses:
        "200":
          $ref: "#/components/responses/Assets"
        "400":
          $ref: "#/components/responses/InvalidParameter"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
      summary: Fetch all assets for a feature
      tags:
        - Data
    post:
      summary: Add a new asset to a feature
      description: >-
        Create a new asset for a specific feature.


        When creating a new asset for a feature, the metadata of
        the asset along with a temporary url of the asset itself is
        posted to the API.


        The service is taking care of copying the asset from the temporary
        location to correct one.
      operationId: postAsset
      tags:
        - Data Management
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/featureId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/itemAssetWrite"
      responses:
        "202":
          description: Accepted create request
          headers:
            Location:
              description: A link to the item
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                type: string
            text/html:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "5XX":
          $ref: "#/components/responses/ServerError"

  "/collections/{collectionId}/items/{featureId}/assets/{assetId}":
    get:
      description: >-
        Fetch the asset with id `assetId` of the feature with id `featureId`
        in the feature collection with id `collectionId`.
      operationId: getAsset
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/featureId"
        - $ref: "#/components/parameters/assetId"
        - $ref: "#/components/parameters/IfMatch"
        - $ref: "#/components/parameters/IfNoneMatch"
      responses:
        "200":
          $ref: "#/components/responses/Asset"
        "304":
          $ref: "#/components/responses/NotModified"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "500":
          $ref: "#/components/responses/ServerError"
      summary: Fetch a single asset
      tags:
        - Data
    put:
      summary: Update an existing asset by Id with a complete asset definition
      description: >-
        Use this method to update an existing asset. Requires the entire
        GeoJSON  description be submitted.
      operationId: putAsset
      tags:
        - Data Management
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/featureId"
        - $ref: "#/components/parameters/assetId"
        - $ref: "#/components/parameters/IfMatchWrite"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/itemAssetWrite"
      responses:
        "200":
          description: Status of the update request.
          content:
            text/html:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "5XX":
          $ref: "#/components/responses/ServerError"
    patch:
      summary: Update an existing asset by Id with a partial asset definition
      description: >-
        Use this method to update an existing asset. Requires a GeoJSON
        fragment (containing the fields to be updated) be submitted.
      operationId: patchAsset
      tags:
        - Data Management
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/featureId"
        - $ref: "#/components/parameters/assetId"
        - $ref: "#/components/parameters/IfMatchWrite"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/partialAsset"
      responses:
        "200":
          description: Status of the update request.
          content:
            text/html:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "5XX":
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete an existing asset by Id
      description: Use this method to delete an existing asset.
      operationId: deleteAsset
      tags:
        - Data Management
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/featureId"
        - $ref: "#/components/parameters/assetId"
        - $ref: "#/components/parameters/IfMatchWrite"
      responses:
        "200":
          $ref: "#/components/responses/DeletedResource"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "5XX":
          $ref: "#/components/responses/ServerError"

components:
  parameters:
    assetId:
      name: assetId
      in: path
      description: Local identifier of a asset
      required: true
      schema:
        type: string
    IfMatchWrite:
      name: If-Match
      in: header
      schema:
        type: string
      description: >-
        The RFC7232 `If-Match` header field makes the PUT/PATCH/DEL request method conditional. It is
        composed of a comma separated list of ETags or value "*".


        The server compares the client's ETags (sent with `If-Match`) with the ETag for its
        current version of the resource, and if both values don't match (that is, the resource has changed),
        the server sends back a `412 Precondition Failed` status, without a body, which tells the client that
        he would overwrite another changes of the resource.
      example: "d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b"
  schemas:
    description:
      type: string
      description: >-
        Detailed multi-line description to fully explain the object (collection,
        item, asset, ...).

        [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich
        text representation.
    assetId:
      type: string
      pattern: ^[a-z0-9.-_]+$
      title: asset id
      description: >-
        The asset id uniquely identifies the asset for an item


        **Note**: `assetId` must be unique for the item. The media-type
        can be part of the `assetId`, so it's perfectly ok to have one asset
        with id `smr50-263-2016-2056-kgrs-2.5.tiff` and another one with id
        `smr50-263-2016-2056-kgrs-2.5.png`
      example: smr50-263-2016-2056-kgrs-2.5.tiff
    itemAssets:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/itemAsset"
    assetBase:
      type: object
      required:
        - "checksum:multihash"
        - href
        - type
        - created
        - updated
        - id
      properties:
        title:
          $ref: "#/components/schemas/title"
        description:
          $ref: "#/components/schemas/description"
        type:
          $ref: "#/components/schemas/type"
        # roles:
        #   $ref: '#/components/schemas/roles'
        "geoadmin:variant":
          $ref: "#/components/schemas/geoadmin:variant"
        "geoadmin:lang":
          $ref: "#/components/schemas/geoadmin:lang"
        "checksum:multihash":
          $ref: "#/components/schemas/checksum:multihash"
        "proj:epsg":
          $ref: "#/components/schemas/proj:epsg"
        "eo:gsd":
          $ref: "#/components/schemas/eo:gsd"
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
    # overwrites the STAC definition of itemAsset
    itemAsset:
      allOf:
        - $ref: "#/components/schemas/assetBase"
        - type: object
          required:
            - href
          properties:
            href:
              $ref: "#/components/schemas/href"
          # example:
          #   smr50-263-2016-2056-kgrs-2.5-tiff:
          #     href: https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr50-263-2016-2056-kgrs-2.5.tiff
          #     type: image/tiff; application=geotiff
          #     proj:epsg: 2056
          #     'geoadmin:variant': kgrs
          #     'geoadmin:lang': fr
          #     eo:gsd: 2.5
          #     checksum:multihash: 90e402107a7f2588a85362b9beea2a12d4514d45
          #     created: 2020-07-14T12:30:00Z
          #     updated: 2020-07-14T12:30:00Z
    itemAssetWrite:
      allOf:
        - $ref: "#/components/schemas/assetBase"
        - type: object
          required:
            - copyFromHref
          properties:
            id:
              $ref: "#/components/schemas/assetId"
            copyFromHref:
              $ref: "#/components/schemas/copyFromHref"
          # example:
          #   smr50-263-2016-2056-kgrs-2.5.tiff:
          #     id: smr50-263-2016-2056-kgrs-2.5
          #     copyFromHref: https://data.geo.admin.ch/tmp/gdwh/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr50-263-2016-2056-kgrs-2.5.tiff
          #     type: image/tiff; application=geotiff
          #     proj:epsg: 2056
          #     'geoadmin:variant': kgrs
          #     'geoadmin:lang': fr
          #     eo:gsd: 2.5
          #     checksum:multihash: 90e402107a7f2588a85362b9beea2a12d4514d45
          #     created: 2020-07-14T12:30:00Z
          #     updated: 2020-07-14T12:30:00Z
    copyFromHref:
      type: string
      format: url
      description: >-
        Link to the temporary location of the asset object.


        The service will move the asset from this temporary location to the correct one under
        `data.geo.admin.ch`. If the temporary location is under `https://data.geo.admin.ch/tmp`
        the data will not actually be copied, but just re-registered under a new key.
      example: >-
        http://data.geo.admin.ch/tmp/gdwh/ch.swisstopo.swissimage/CS3-20160503_132130_04.png
    href:
      type: string
      format: url
      description: Link to the asset object
      example: >-
        http://data.geo.admin.ch/ch.swisstopo.swissimage/collections/cs/items/CS3-20160503_132130_04/thumb.png
    partialAsset:
      allOf:
        - $ref: "#/components/schemas/assetBase"
        - type: object
          properties:
            copyFromHref:
              $ref: "#/components/schemas/copyFromHref"
          example:
            description: The new description of the asset
    writeItem:
      allOf:
        - $ref: "#/components/schemas/itemBase"
        - type: object
          properties:
            links:
              items:
                $ref: "#/components/schemas/link"
              type: array
              description: >-
                Add additional link to the generated ones (`self`, `root`, `parent`, `items`,
                `collection`, `next`, `previous`)
    createItem:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              $ref: "#/components/schemas/itemId"
        - $ref: "#/components/schemas/writeItem"
    updateItem:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              $ref: "#/components/schemas/itemIdUpdate"
        - $ref: "#/components/schemas/writeItem"
    partialItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/itemIdUpdate"
        geometry:
          $ref: "https://geojson.org/schema/Geometry.json"
        properties:
          $ref: "#/components/schemas/itemProperties"
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
          description: >-
            Add/update additional link to the generated ones (`self`, `root`, `parent`, `items`,
            `collection`, `next`, `previous`)
      example:
        properties:
          datetime: "2016-05-03T13:22:30.040Z"
        # assets:
        #   analytic:
        #     title: 1-Band Analytic
        #     href: http://cool-sat.com/catalog/collections/cs/items/CS3-201605XX_132130_04/analytic-1.tif
    partialCollection:
      type: object
      description: Allows for a set of partial metadata fields for a collection
      properties:
        id:
          description: Identifier of the collection used, for example, in URIs
          type: string
          example: ch.swisstopo.pixelkarte-farbe-pk200.noscale
        title:
          description: Human readable title of the collection
          type: string
          example: National Map 1:200'000
        description:
          description: A description of the features in the collection
          type: string
          example: The National Map 1:200,000 is a topographic map giving an overview of Switzerland.
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
          example:
            - href: http://data.example.com/buildings
              rel: item
            - href: http://example.com/concepts/buildings.html
              rel: describedBy
              type: text/html
        extent:
          $ref: "#/components/schemas/extent"
        itemType:
          description: >-
            Indicator about the type of the items in the collection (the default value is 'feature').
          type: string
          default: feature
        crs:
          description: The list of coordinate reference systems supported by the service
          type: array
          items:
            type: string
          default:
            - http://www.opengis.net/def/crs/OGC/1.3/CRS84
          example:
            - http://www.opengis.net/def/crs/OGC/1.3/CRS84
            - http://www.opengis.net/def/crs/EPSG/0/4326
        example:
          title: The new title of the collection
    roles:
      type: array
      items:
        type: string
      description: Purposes of the asset
      example:
        - thumbnail
    title:
      type: string
      description: Displayed title
      example: Thumbnail
    type:
      type: string
      description: Media type of the asset
      example: image/png
    # Overwrite the collection links examples
    # collection:
    #   properties:
    #     links:
    #       example:
    #         - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html
    #           rel: license
    #           title: Licence for the free geodata of the Federal Office of Topography swisstopo
    #         - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df
    #           rel: describedby
    #       items:
    #         $ref: "#/components/schemas/link"
    #       type: array
    itemIdUpdate:
      description: >-
        Item identifier (unique per collection. If it doesn't match the `featureId` in path
        parameters, then the Item is renamed.
      example: smr200-200-4-2019
      type: string
  responses:
    Assets:
      description: >-
        The response is a document consisting of all assets of the feature.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/itemAssets"
    Asset:
      description: >-
        The response is a document consisting of one asset of the feature.
      headers:
        ETag:
          $ref: "#/components/schemas/ETag"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/itemAsset"
    DeletedResource:
      description: Status of the delete resource
      content:
        application/json:
          schema:
            description: >-
              Information about the deleted resource and a link to the parent resource
            type: object
            properties:
              code:
                type: int
                example: 200
              description:
                type: string
                example: Resource successfully deleted
              links:
                type: array
                items:
                  $ref: "#/components/schemas/link"
                description: >-
                  The array contain at least a link to the parent resource (`rel: parent`).
                example:
                  - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items
                    rel: parent
            required:
              - code
              - links
    BadRequest:
      description: The request was malformed or semantically invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/exception"
          example:
            code: 400
            description: "Invalid parameter"
    PermissionDenied:
      description: No Permission for this request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/exception"
          example:
            code: 403
            description: "Permission denied"
# Note: this is defined as an overwrite in 'overwrites', since defining it here would violate
# the alphabetical order of the tags ending up in openapi.yaml, see https://speccy.io/rules/1-rulesets#openapi-tags-alphabetical
# tags:
#   - name: 'Data Management'
#     description: >-
#       STAC-specific operations to add, remove, and edit items within OGC API - Features
#       collections.
