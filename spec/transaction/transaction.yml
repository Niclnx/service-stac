openapi: 3.0.1
paths:
  "/collections":
    post:
      tags:
        - Data Management
      summary: >-
        Create a new collection
      operationId: createCollection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/collection"
            example:
              description: The National Map 1:200,000 is a topographic map giving an overview of Switzerland.
              id: ch.swisstopo.pixelkarte-farbe-pk200.noscale
              license: proprietary
              links:
                - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html
                  rel: license
                  title: Licence for the free geodata of the Federal Office of Topography swisstopo
                - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df
                  rel: describedby
              providers:
                - name: Federal Office of Topography - swisstopo
                  roles:
                    - producer
                    - licensor
                  url: https://www.swisstopo.admin.ch
              title: National Map 1:200'000
      responses:
        "201":
          description: Returns the created Collection
          headers:
            Location:
              description: A link to the collection
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/collectionWrite"
        "403":
          $ref: "#/components/responses/PermissionDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  "/collections/{collectionId}":
    put:
      tags:
        - Data Management
      summary: Update or create a collection
      description: >-
        Update or create a collection with Id `collectionId` with a complete collection definition.
        If the collection doesn't exists it is then created.
      operationId: updateCollection
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/IfMatchWrite"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/collectionWrite"
            example:
              description: The National Map 1:200,000 is a topographic map giving an overview of Switzerland.
              id: ch.swisstopo.pixelkarte-farbe-pk200.noscale
              license: proprietary
              links:
                - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html
                  rel: license
                  title: Licence for the free geodata of the Federal Office of Topography swisstopo
                - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df
                  rel: describedby
              providers:
                - name: Federal Office of Topography - swisstopo
                  roles:
                    - producer
                    - licensor
                  url: https://www.swisstopo.admin.ch
              title: National Map 1:200'000
      responses:
        "200":
          description: Returns the updated Collection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/collection"
        "201":
          description: Returns the created Collection
          headers:
            Location:
              description: A link to the collection
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/collection"
        "403":
          $ref: "#/components/responses/PermissionDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - Data Management
      summary: Partial update of a collection
      description: >-
        Update an existing collection with Id `collectionId` with a partial collection definition
      operationId: partialUpdateCollection
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/IfMatch"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/collectionWrite"
            example:
              id: ch.swisstopo.pixelkarte-farbe-pk200.noscale
              license: proprietary
              links:
                - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html
                  rel: license
                  title: Licence for the free geodata of the Federal Office of Topography swisstopo
                - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df
                  rel: describedby
              providers:
                - name: Federal Office of Topography - swisstopo
                  roles:
                    - producer
                    - licensor
                  url: https://www.swisstopo.admin.ch
              title: National Map 1:200'000
      responses:
        "200":
          description: Returns the updated Collection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/collection"
        "403":
          $ref: "#/components/responses/PermissionDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "500":
          $ref: "#/components/responses/ServerError"
  "/collections/{collectionId}/items":
    post:
      summary: Add a new feature to a collection
      description: Create a new feature/item in a specific collection
      operationId: postFeature
      tags:
        - Data Management
      parameters:
        - $ref: "#/components/parameters/collectionId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createItem"
            example:
              id: cs3-20160503_132131_05
              geometry:
                type: Polygon
                coordinates:
                  - - - -122.308150179
                      - 37.488035566
                    - - -122.597502109
                      - 37.538869539
                    - - -122.576687533
                      - 37.613537207
                    - - -122.2880486
                      - 37.562818007
                    - - -122.308150179
                      - 37.488035566
              properties:
                datetime: "2016-05-03T13:22:30.040Z"
                title: A CS3 item
              links:
                - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html
                  rel: license
                  title: Licence for the free geodata of the Federal Office of Topography swisstopo
                - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df
                  rel: describedby
      responses:
        "201":
          description: Return the created Item.
          headers:
            Location:
              description: A link to the item
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/PermissionDenied"
        "5XX":
          $ref: "#/components/responses/ServerError"
  "/collections/{collectionId}/items/{featureId}":
    put:
      summary: Update or create a feature
      description: >-
        Update or create a feature with Id `featureId` with a complete feature
        definition. If the feature doesn't exists it is then created.


        *NOTE: Optional fields that are not part of the PUT payload, will be erased
        in the resource. For example if the resource has a properties.title and the
        PUT payload doesn't, then the resource's properties.title will be removed.*
      operationId: putFeature
      tags:
        - Data Management
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/featureId"
        - $ref: "#/components/parameters/IfMatchWrite"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateItem"
            example:
              id: cs3-20160503_132131_05
              geometry:
                type: Polygon
                coordinates:
                  - - - -122.308150179
                      - 37.488035566
                    - - -122.597502109
                      - 37.538869539
                    - - -122.576687533
                      - 37.613537207
                    - - -122.2880486
                      - 37.562818007
                    - - -122.308150179
                      - 37.488035566
              properties:
                datetime: "2016-05-03T13:22:30.040Z"
                title: A CS3 item
              links:
                - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html
                  rel: license
                  title: Licence for the free geodata of the Federal Office of Topography swisstopo
                - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df
                  rel: describedby
      responses:
        "200":
          description: Returns the updated Item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/PermissionDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "5XX":
          $ref: "#/components/responses/ServerError"
    patch:
      summary: Update an existing feature by Id with a partial item definition
      description: >-
        Use this method to update an existing feature. Requires a JSON
        fragment (containing the fields to be updated) be submitted.
      operationId: patchFeature
      tags:
        - Data Management
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/featureId"
        - $ref: "#/components/parameters/IfMatchWrite"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/partialItem"
      responses:
        "200":
          description: Returns the updated Item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        "201":
          description: Returns the created Item
          headers:
            Location:
              description: A link to the item
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/PermissionDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "5XX":
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete an existing feature by Id
      description: Use this method to delete an existing feature/item.
      operationId: deleteFeature
      tags:
        - Data Management
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/featureId"
        - $ref: "#/components/parameters/IfMatchWrite"
      responses:
        "200":
          $ref: "#/components/responses/DeletedResource"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "5XX":
          $ref: "#/components/responses/ServerError"
  "/collections/{collectionId}/items/{featureId}/assets":
    get:
      description: >-
        Fetch assets of the item with id `featureId`.

        Every asset belongs to an item.
      operationId: getAssets
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/featureId"
      responses:
        "200":
          $ref: "#/components/responses/Assets"
        "400":
          $ref: "#/components/responses/InvalidParameter"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
      summary: Fetch all assets for a feature
      tags:
        - Data
    post:
      summary: Add a new asset to a feature
      description: |
        Create a new asset for a specific feature.

        *Note: to upload an asset file see [Asset Upload Management](#tag/Asset-Upload-Management)*
      operationId: postAsset
      tags:
        - Data Management
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/featureId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createAsset"
      responses:
        "201":
          description: Return the created Asset
          headers:
            Location:
              description: A link to the asset
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createAsset"
        "400":
          $ref: "#/components/responses/BadRequest"
        "5XX":
          $ref: "#/components/responses/ServerError"

  "/collections/{collectionId}/items/{featureId}/assets/{assetId}":
    get:
      description: >-
        Fetch the asset with id `assetId` of the feature with id `featureId`
        in the feature collection with id `collectionId`.
      operationId: getAsset
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/featureId"
        - $ref: "#/components/parameters/assetId"
        - $ref: "#/components/parameters/IfMatch"
        - $ref: "#/components/parameters/IfNoneMatch"
      responses:
        "200":
          $ref: "#/components/responses/Asset"
        "304":
          $ref: "#/components/responses/NotModified"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "500":
          $ref: "#/components/responses/ServerError"
      summary: Fetch a single asset
      tags:
        - Data
    put:
      summary: Update or create an asset
      description: >-
        Update or create an asset with Id `assetId` with a complete asset definition.
        If the asset doesn't exists it is then created.


        *Note: to upload an asset file see [Asset Upload Management](#tag/Asset-Upload-Management)*
      operationId: putAsset
      tags:
        - Data Management
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/featureId"
        - $ref: "#/components/parameters/assetId"
        - $ref: "#/components/parameters/IfMatchWrite"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/readUpdateAsset"
      responses:
        "200":
          description: Asset has been successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/readUpdateAsset"
        "201":
          description: Asset has been newly created.
          headers:
            Location:
              description: A link to the asset
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createAsset"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "5XX":
          $ref: "#/components/responses/ServerError"
    patch:
      summary: Update an existing asset by Id with a partial asset definition
      description: >-
        Use this method to update an existing asset. Requires a JSON
        fragment (containing the fields to be updated) be submitted.


        *Note: to upload an asset file see [Asset Upload Management](#tag/Asset-Upload-Management)*
      operationId: patchAsset
      tags:
        - Data Management
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/featureId"
        - $ref: "#/components/parameters/assetId"
        - $ref: "#/components/parameters/IfMatchWrite"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/readUpdateAsset"
      responses:
        "200":
          description: Returns the updated Asset.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/readUpdateAsset"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "5XX":
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete an existing asset by Id
      description: >-
        Use this method to delete an existing asset.


        **NOTE: Asset file on S3 will be also removed !**
      operationId: deleteAsset
      tags:
        - Data Management
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/featureId"
        - $ref: "#/components/parameters/assetId"
        - $ref: "#/components/parameters/IfMatchWrite"
      responses:
        "200":
          $ref: "#/components/responses/DeletedResource"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "5XX":
          $ref: "#/components/responses/ServerError"


  "/collections/{collectionId}/items/{featureId}/assets/{assetId}/uploads":
    parameters:
      - $ref: "#/components/parameters/collectionId"
      - $ref: "#/components/parameters/featureId"
      - $ref: "#/components/parameters/assetId"
    get:
      tags:
        - Asset Upload Management
      summary: List all Asset's multipart uploads
      description: >-
        Return a list of all Asset's multipart uploads that are in progress and have been completed
        or aborted.
      operationId: getAssetUploads
      parameters:
        - name: status
          in: query
          description: Filter the list by status.
          schema:
            $ref: "#/components/schemas/status"
      responses:
        200:
          description: List of Asset's uploads
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/assetUploads"
              example:
                uploads:
                  - upload_id: KrFTuglD.N8ireqry_w3.oQqNwrYI7SfSXpVRiusKah0YigDnusebaJNIUZg4R_No0MMW9FLU2UG5anTW0boTUYVxKfBZWCFXqnQTpjnQEo1K7la39MYpjSTvIbZgnG
                    status: in-progress
                    number_parts: 1
                    urls:
                    - url: https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr200-200-4-2019/smr50-263-2016-2056-kgrs-2.5.tiff?uploadId=d77UbNnEVTaqCAyAz61AVqy7uuTGJ_YOUyPOklcRMr4ZPBthON9p6cpMREx683yQ_oeGVmGE_yTg4cmnEz3mTErEPKn0_m.3LBjo6A88Qxlj4vFrAdU6YBuourb.IqFF&partNumber=1&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIA4HDUVYWAM6ZB6SWO%2F20210414%2Feu-central-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T112742Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d12763467eaffa0c69d601297a661a05c9f414d4008b4148fa6ba604f203be01
                      part: 1
                      expires: '2019-08-24T14:15:22Z'
                    created: '2019-08-24T14:15:22Z'
                    checksum:multihash: 90e402107a7f2588a85362b9beea2a12d4514d45
                  - upload_id: KrFTuglD.N8ireqry_w3.oQqNwrYI7SfSXpVRiusKah0YaaegJNIUZg4R_No0MMW9FLU2UG5anTW0boTUYVxKfBZWCFXqnQTpjnQEo1K7la39MYpjSTvIbZgnG
                    status: completed
                    number_parts: 1
                    created: '2019-08-24T14:15:22Z'
                    completed: '2019-08-24T14:15:22Z'
                    checksum:multihash: 90e402107a7f2588a85362b9beea2a12d4514d45
                  - upload_id: KrFTuglD.N8ireqry_w3.oQqNwrYI7SfSXpVRiusKah0YigDnuM06hfJNIUZg4R_No0MMW9FLU2UG5anTW0boTUYVxKfBZWCFXqnQTpjnQEo1K7la39MYpjSTvIbZgnG
                    status: aborted
                    number_parts: 1
                    created: '2019-08-24T14:15:22Z'
                    aborted: '2019-08-24T14:15:22Z'
                    checksum:multihash: 90e402107a7f2588a85362b9beea2a12d4514d45
                links:
                  - rel: next
                    href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets/smr50-263-2016-2056-kgrs-2.5.tiff/uploads?cursor=0d34
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - Asset Upload Management
      summary: Create a new Asset's multipart upload
      description: |
        Create a new Asset's multipart upload.
      operationId: createAssetUpload
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/assetUploadCreate"
      responses:
        201:
          description: Created Asset's multipart upload
          headers:
            Location:
              description: A link to the Asset's multipart upload object
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/assetUploadCreate"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/ServerError"
  "/collections/{collectionId}/items/{featureId}/assets/{assetId}/uploads/{uploadId}":
    parameters:
      - $ref: "#/components/parameters/collectionId"
      - $ref: "#/components/parameters/featureId"
      - $ref: "#/components/parameters/assetId"
      - $ref: "#/components/parameters/uploadId"
    get:
      tags:
        - Asset Upload Management
      summary: Get an Asset's multipart upload
      description: |
        Return an Asset's multipart upload.
      operationId: getAssetUpload
      parameters:
        - $ref: "#/components/parameters/IfMatch"
        - $ref: "#/components/parameters/IfNoneMatch"
      responses:
        "200":
          description: Asset's multipart upload description.
          headers:
            ETag:
              $ref: "#/components/headers/ETag"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/assetUpload"
              examples:
                inprogress:
                  $ref: "#/components/examples/inprogress"
                completed:
                  $ref: "#/components/examples/completed"
                aborted:
                  $ref: "#/components/examples/aborted"
        "304":
          $ref: "#/components/responses/NotModified"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "500":
          $ref: "#/components/responses/ServerError"
  "/{presignedUrl}":
    servers:
      - url: http://data.geo.admin.ch/
    put:
      tags:
        - Asset Upload Management
      summary: Upload asset file part
      description: >-
        Upload an Asset file part using the presigned url(s) returned by
        [Create a new Asset's multipart upload](#operation/createAssetUpload).


        Parts that have been uploaded but not completed can be checked using
        [Get an Asset's multipart upload](#operation/getAssetUpload)


        A file part must be at least 5 MB except for the last one and at most 5 GB, otherwise the
        complete operation will fail.


        *Note: this endpoint doesn't require any authentication as it is already part of the
        presigned url*
      operationId: uploadAssetFilePart
      parameters:
        - $ref: "#/components/parameters/presignedUrl"
        - name: Content-MD5
          in: header
          description: Asset file part content MD5.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Asset file uploaded part successfully
          headers:
            ETag:
              schema:
                type: string
              description: >-
                The RFC7232 ETag header field in a response provides the current entity-
                tag for the selected resource.


                This ETag is required in the complete multipart upload payload.


                An entity-tag is an opaque identifier for
                different versions of a resource over time, regardless whether multiple
                versions are valid at the same time. An entity-tag consists of an opaque
                quoted string.
              example: "d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b"
              required: true
  "/collections/{collectionId}/items/{featureId}/assets/{assetId}/uploads/{uploadId}/complete":
    parameters:
      - $ref: "#/components/parameters/collectionId"
      - $ref: "#/components/parameters/featureId"
      - $ref: "#/components/parameters/assetId"
      - $ref: "#/components/parameters/uploadId"
    post:
      tags:
        - Asset Upload Management
      summary: Complete multipart upload
      operationId: completeMultipartUpload
      description: >-
        Complete the multipart upload process. After completion, the Asset metadata are updated
        with the new `checksum:multihash` from the upload and the parts are automatically deleted.
        The Asset `href` field is also set if it was the first upload.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/assetCompleteUpload"
      responses:
        "200":
          description: Asset multipart upload completed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/assetUploadCompleted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/ServerError"
  "/collections/{collectionId}/items/{featureId}/assets/{assetId}/uploads/{uploadId}/abort":
    parameters:
      - $ref: "#/components/parameters/collectionId"
      - $ref: "#/components/parameters/featureId"
      - $ref: "#/components/parameters/assetId"
      - $ref: "#/components/parameters/uploadId"
    post:
      tags:
        - Asset Upload Management
      summary: Abort multipart upload
      operationId: abortMultipartUpload
      description: >-
        Abort the multipart upload process. All already uploaded parts are automatically deleted.
      responses:
        "200":
          description: Asset multipart upload aborted successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/assetUploadAborted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/ServerError"
  "/collections/{collectionId}/items/{featureId}/assets/{assetId}/uploads/{uploadId}/parts":
    parameters:
      - $ref: "#/components/parameters/collectionId"
      - $ref: "#/components/parameters/featureId"
      - $ref: "#/components/parameters/assetId"
      - $ref: "#/components/parameters/uploadId"
    get:
      tags:
        - Asset Upload Management
      summary: Get upload parts
      operationId: getUploadParts
      description: >-
        Return the list of already uploaded parts.


        ### Pagination

        By default all parts are returned (maximum number of parts being 100). The user can
        use pagination to reduce the number of returned parts. Pagination is done via the `limit`
        query parameter (see below).
      parameters:
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          description: List of parts already uploaded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/assetUploadParts"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/ServerError"


  "/get-token":
    servers:
      - url: http://data.geo.admin.ch/api/stac/
    post:
      tags:
        - Authentication
      summary: >-
        Request token for token authentication.
      operationId: getToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: name of user for whom token is requested
                password:
                  type: string
                  description: password of user for whom token is requested
              required:
                - username
                - password
            example:
              username: "Mickey Mouse"
              password: "I_love_Minnie_Mouse"
      responses:
        "200":
          description: Returns the token for the specified user
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: generated token for specified user
              example:
                token: ccecf40693bfc52ba090cd46eb7f19e723fe831f
        "400":
          description: Wrong credentials were provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  description:
                    type: string
              example:
                code: 400
                description: "Unable to log in with provided credentials."

components:
  examples:
    inprogress:
      summary: In progress upload example
      value:
        upload_id: KrFTuglD.N8ireqry_w3.oQqNwrYI7SfSXpVRiusKah0YigDnuM06hfJNIUZg4R_No0MMW9FLU2UG5anTW0boTUYVxKfBZWCFXqnQTpjnQEo1K7la39MYpjSTvIbZgnG
        status: in-progress
        number_parts: 1
        urls:
        - url: https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr200-200-4-2019/smr50-263-2016-2056-kgrs-2.5.tiff?uploadId=d77UbNnEVTaqCAyAz61AVqy7uuTGJ_YOUyPOklcRMr4ZPBthON9p6cpMREx683yQ_oeGVmGE_yTg4cmnEz3mTErEPKn0_m.3LBjo6A88Qxlj4vFrAdU6YBuourb.IqFF&partNumber=1&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIA4HDUVYWAM6ZB6SWO%2F20210414%2Feu-central-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T112742Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d12763467eaffa0c69d601297a661a05c9f414d4008b4148fa6ba604f203be01
          part: 1
          expires: '2019-08-24T14:15:22Z'
        created: '2019-08-24T14:15:22Z'
        checksum:multihash: 90e402107a7f2588a85362b9beea2a12d4514d45
    completed:
      summary: Completed upload example
      value:
        upload_id: KrFTuglD.N8ireqry_w3.oQqNwrYI7SfSXpVRiusKah0YigDnuM06hfJNIUZg4R_No0MMW9FLU2UG5anTW0boTUYVxKfBZWCFXqnQTpjnQEo1K7la39MYpjSTvIbZgnG
        status: completed
        number_parts: 1
        created: '2019-08-24T14:15:22Z'
        completed: '2019-08-24T14:15:22Z'
        checksum:multihash: 90e402107a7f2588a85362b9beea2a12d4514d45
    aborted:
      summary: Aborted upload example
      value:
        upload_id: KrFTuglD.N8ireqry_w3.oQqNwrYI7SfSXpVRiusKah0YigDnuM06hfJNIUZg4R_No0MMW9FLU2UG5anTW0boTUYVxKfBZWCFXqnQTpjnQEo1K7la39MYpjSTvIbZgnG
        status: completed
        number_parts: 1
        created: '2019-08-24T14:15:22Z'
        aborted: '2019-08-24T14:15:22Z'
        checksum:multihash: 90e402107a7f2588a85362b9beea2a12d4514d45
  parameters:
    assetId:
      name: assetId
      in: path
      description: Local identifier of an asset.
      required: true
      schema:
        type: string
    uploadId:
      name: uploadId
      in: path
      description: Local identifier of an asset's upload.
      required: true
      schema:
        type: string
    presignedUrl:
      name: presignedUrl
      in: path
      description: Presigned url returned by [Create a new Asset's multipart upload](#operation/createAssetUpload).
      required: true
      schema:
        type: string
    IfMatchWrite:
      name: If-Match
      in: header
      schema:
        type: string
      description: >-
        The RFC7232 `If-Match` header field makes the PUT/PATCH/DEL request method conditional. It is
        composed of a comma separated list of ETags or value "*".


        The server compares the client's ETags (sent with `If-Match`) with the ETag for its
        current version of the resource, and if both values don't match (that is, the resource has changed),
        the server sends back a `412 Precondition Failed` status, without a body, which tells the client that
        he would overwrite another changes of the resource.
      example: "d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b"
  schemas:
    assetId:
      type: string
      pattern: ^[a-z0-9.-_]+$
      title: ID
      description: >-
        The asset id uniquely identifies the asset for an item


        **Note**: `id` must be unique for the item and must be identical to the
        filename.
      example: smr50-263-2016-2056-kgrs-2.5.tiff
    assets:
      title: Assets
      type: object
      properties:
        assets:
          items:
            $ref: "#/components/schemas/readUpdateAsset"
          type: array
        links:
          items:
            $ref: "#/components/schemas/link"
          type: array
          example:
            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets
              rel: self
            - href: https://data.geo.admin.ch/api/stac/v0.9/
              rel: root
            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019
              rel: parent
            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019
              rel: item
            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale
              rel: collection
    createAsset:
      allOf:
        - $ref: "#/components/schemas/assetBase"
        - type: object
          required:
            - id
            - links
          properties:
            id:
              $ref: "#/components/schemas/assetId"
            links:
              items:
                $ref: "#/components/schemas/link"
              type: array
              readOnly: true
              example:
                - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets/smr50-263-2016-2056-kgrs-2.5.tiff
                  rel: self
                - href: https://data.geo.admin.ch/api/stac/v0.9/
                  rel: root
                - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets
                  rel: parent
                - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019
                  rel: item
                - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale
                  rel: collection
    readUpdateAsset:
      allOf:
        - $ref: "#/components/schemas/assetBase"
        - type: object
          required:
            - id
            - links
          properties:
            id:
              $ref: "#/components/schemas/assetId"
            links:
              items:
                $ref: "#/components/schemas/link"
              type: array
              readOnly: true
              example:
                - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets/smr50-263-2016-2056-kgrs-2.5.tiff
                  rel: self
                - href: https://data.geo.admin.ch/api/stac/v0.9/
                  rel: root
                - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets
                  rel: parent
                - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019
                  rel: item
                - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale
                  rel: collection

    writeItem:
      allOf:
        - $ref: "#/components/schemas/itemBase"
        - type: object
          properties:
            links:
              items:
                $ref: "#/components/schemas/link"
              type: array
              description: >-
                Add additional link to the generated ones (`self`, `root`, `parent`, `items`,
                `collection`, `next`, `previous`)
    createItem:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              $ref: "#/components/schemas/itemId"
        - $ref: "#/components/schemas/writeItem"
    updateItem:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              $ref: "#/components/schemas/itemIdUpdate"
        - $ref: "#/components/schemas/writeItem"
    partialItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/itemIdUpdate"
        geometry:
          $ref: "https://geojson.org/schema/Geometry.json"
        properties:
          $ref: "#/components/schemas/itemProperties"
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
          description: >-
            Add/update additional link to the generated ones (`self`, `root`, `parent`, `items`,
            `collection`, `next`, `previous`)
      example:
        properties:
          datetime: "2016-05-03T13:22:30.040Z"
    partialCollection:
      type: object
      description: Allows for a set of partial metadata fields for a collection
      properties:
        id:
          description: Identifier of the collection used, for example, in URIs
          type: string
          example: ch.swisstopo.pixelkarte-farbe-pk200.noscale
        title:
          description: Human readable title of the collection
          type: string
          example: National Map 1:200'000
        description:
          description: A description of the features in the collection
          type: string
          example: The National Map 1:200,000 is a topographic map giving an overview of Switzerland.
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
          example:
            - href: http://data.example.com/buildings
              rel: item
            - href: http://example.com/concepts/buildings.html
              rel: describedBy
              type: text/html
        extent:
          $ref: "#/components/schemas/extent"
        itemType:
          description: >-
            Indicator about the type of the items in the collection (the default value is 'feature').
          type: string
          default: feature
        crs:
          description: The list of coordinate reference systems supported by the service
          type: array
          items:
            type: string
          default:
            - http://www.opengis.net/def/crs/OGC/1.3/CRS84
          example:
            - http://www.opengis.net/def/crs/OGC/1.3/CRS84
            - http://www.opengis.net/def/crs/EPSG/0/4326
        example:
          title: The new title of the collection
    itemIdUpdate:
      description: >-
        Item identifier (unique per collection. If it doesn't match the `featureId` in path
        parameters, then the Item is renamed.
      example: smr200-200-4-2019
      type: string
    uploadId:
      title: ID
      type: string
      description: Unique Asset upload identifier
      example: KrFTuglD.N8ireqry_w3.oQqNwrYI7SfSXpVRiusKah0YigDnuM06hfJNIUZg4R_No0MMW9FLU2UG5anTW0boTUYVxKfBZWCFXqnQTpjnQEo1K7la39MYpjSTvIbZgnG
      readOnly: true
    dtUploadCreated:
      title: created
      description: Date and time when the Asset's upload has been created/started.
      type: string
      format: date-time
      readOnly: true
    dtUploadCompleted:
      title: completed
      description: |
        Date and time when the Asset's upload has been completed.

        *Note: this property is mutually exclusive with `aborted`*
      type: string
      format: date-time
      readOnly: true
    dtUploadAborted:
      title: aborted
      description: |
        Date and time when the Asset's upload has been aborted.

        *Note: this property is mutually exclusive with `completed`*
      type: string
      format: date-time
      readOnly: true
    assetUploads:
      title: AssetUploads
      type: object
      required:
        - uploads
        - links
      properties:
        uploads:
          description: List of uploads that are within the asset.
          type: array
          items:
            $ref: "#/components/schemas/assetUpload"
        links:
          description: Next and/or previous links for the pagination.
          type: array
          items:
            $ref: "#/components/schemas/link"
          example:
            - rel: next
              href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets/smr50-263-2016-2056-kgrs-2.5.tiff/uploads?cursor=0d34
    assetUpload:
      title: AssetUpload
      type: object
      required:
        - upload_id
        - status
        - created
        - "checksum:multihash"
        - number_parts
      properties:
        upload_id:
          $ref: "#/components/schemas/uploadId"
        status:
          $ref: "#/components/schemas/status"
        number_parts:
          $ref: "#/components/schemas/number_parts"
        urls:
          type: array
          description: |
            Note: As soon as the multipart upload is completed or aborted, the `urls` property is removed.
          items:
            $ref: "#/components/schemas/multipartUploadUrl"
          readOnly: true
        created:
          $ref: "#/components/schemas/dtUploadCreated"
        completed:
          $ref: "#/components/schemas/dtUploadCompleted"
        aborted:
          $ref: "#/components/schemas/dtUploadAborted"
        "checksum:multihash":
          $ref: "#/components/schemas/checksumMultihash"
    assetUploadCreate:
      title: AssetUpload
      type: object
      required:
        - upload_id
        - status
        - created
        - "checksum:multihash"
        - number_parts
      properties:
        upload_id:
          $ref: "#/components/schemas/uploadId"
        status:
          $ref: "#/components/schemas/status"
        number_parts:
          $ref: "#/components/schemas/number_parts"
        urls:
          type: array
          description: |
            Note: As soon as the multipart upload is completed or aborted, the `urls` property is removed.
          items:
            $ref: "#/components/schemas/multipartUploadUrl"
          readOnly: true
        created:
          $ref: "#/components/schemas/dtUploadCreated"
        "checksum:multihash":
          $ref: "#/components/schemas/checksumMultihash"
    assetCompleteUpload:
      title: CompleteUpload
      type: object
      required:
        - parts
      properties:
        parts:
          type: array
          description: Parts that have been uploaded
          items:
            title: File parts that have been uploaded
            type: object
            required:
              - etag
              - part_number
            properties:
              etag:
                title: ETag
                type: string
                description: >-
                  ETag of the uploaded file part (returned in the header of the answer of
                  [Upload asset file part](#operation/uploadAssetFilePart)).
                example: "d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b"
              part_number:
                $ref: "#/components/schemas/part_number"
    assetUploadCompleted:
      title: UploadCompleted
      type: object
      required:
        - upload_id
        - status
        - number_parts
        - created
        - completed
        - "checksum:multihash"
      properties:
        upload_id:
          $ref: "#/components/schemas/uploadId"
        status:
          title: Status
          description: Status of the Asset's multipart upload.
          type: string
          enum:
            - completed
          example:
            completed
        number_parts:
          $ref: "#/components/schemas/number_parts"
        created:
          $ref: "#/components/schemas/dtUploadCreated"
        completed:
          $ref: "#/components/schemas/dtUploadCompleted"
        "checksum:multihash":
          $ref: "#/components/schemas/checksumMultihash"
    assetUploadAborted:
      title: UploadCompleted
      type: object
      required:
        - upload_id
        - status
        - number_parts
        - created
        - aborted
        - "checksum:multihash"
      properties:
        upload_id:
          $ref: "#/components/schemas/uploadId"
        status:
          title: Status
          description: Status of the Asset's multipart upload.
          type: string
          enum:
            - aborted
          example:
            aborted
        number_parts:
          $ref: "#/components/schemas/number_parts"
        created:
          $ref: "#/components/schemas/dtUploadCreated"
        aborted:
          $ref: "#/components/schemas/dtUploadAborted"
        "checksum:multihash":
          $ref: "#/components/schemas/checksumMultihash"
    assetUploadParts:
      title: Parts
      type: object
      required:
        - parts
        - links
      properties:
        parts:
          type: object
          description: List of uploaded parts
          required:
            - etag
            - part_number
            - modified
            - size
          properties:
            etag:
              $ref: "#/components/schemas/uploadEtag"
            part_number:
              $ref: "#/components/schemas/part_number"
            modified:
              type: string
              format: date-time
              description: Date time when the part was added/modified
            size:
              type: integer
              description: Part size in bytes
              minimum: 0
              example: 1024
        links:
          description: Next and/or previous links for the pagination.
          type: array
          items:
            $ref: "#/components/schemas/link"
          example:
            - rel: next
              href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets/smr50-263-2016-2056-kgrs-2.5.tiff/uploads/upload-id/parts?limit=50&offset=50
    status:
      title: Status
      description: Status of the Asset's multipart upload.
      type: string
      enum:
        - in-progress
        - aborted
        - completed
      readOnly: true
    number_parts:
      description: Number of parts for the Asset's multipart upload.
      type: integer
      minimum: 1
      maximum: 100
    part_number:
      description: Number of the part.
      type: integer
      minimum: 1
      maximum: 100
    multipartUploadUrl:
      title: MultipartUploadUrl
      description: Multipart upload url.
      type: object
      required:
        - url
        - part
        - expires
      properties:
        url:
          description: Presigned URL to use to upload the Asset File part using the PUT method.
          type: string
          format: url
          example: https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr200-200-4-2019/smr50-263-2016-2056-kgrs-2.5.tiff?uploadId=d77UbNnEVTaqCAyAz61AVqy7uuTGJ_YOUyPOklcRMr4ZPBthON9p6cpMREx683yQ_oeGVmGE_yTg4cmnEz3mTErEPKn0_m.3LBjo6A88Qxlj4vFrAdU6YBuourb.IqFF&partNumber=1&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIA4HDUVYWAM6ZB6SWO%2F20210414%2Feu-central-1%2Fs3%2Faws4_request&X-Amz-Date=20210414T112742Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=d12763467eaffa0c69d601297a661a05c9f414d4008b4148fa6ba604f203be01
        part:
          description: Part number assigned to this presigned URL.
          type: integer
          minimum: 1
          maximum: 100
        expires:
          description: Date time when this presigned URL expires and is not valid anymore.
          type: string
          format: date-time
    uploadEtag:
      title: ETag
      type: string
      description: The RFC7232 ETag for the specified uploaded part.
      example: "d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b"

  responses:
    Assets:
      description: >-
        The response is a document consisting of all assets of the feature.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/assets"
    Asset:
      description: >-
        The response is a document consisting of one asset of the feature.
      headers:
        ETag:
          $ref: "#/components/headers/ETag"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/readUpdateAsset"
    DeletedResource:
      description: Status of the delete resource
      content:
        application/json:
          schema:
            description: >-
              Information about the deleted resource and a link to the parent resource
            type: object
            properties:
              code:
                type: integer
                example: 200
              description:
                type: string
                example: Resource successfully deleted
              links:
                type: array
                items:
                  $ref: "#/components/schemas/link"
                description: >-
                  The array contain at least a link to the parent resource (`rel: parent`).
                example:
                  - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items
                    rel: parent
            required:
              - code
              - links
    PermissionDenied:
      description: No Permission for this request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/exception"
          example:
            code: 403
            description: "Permission denied"

tags:
  - name: Capabilities
    description: Essential characteristics of this API
  - name: Data
    description: Access to data (features)
  - name: STAC
    description: Extension to OGC API - Features to support STAC metadata model and search API
  - name: Data Management
    description: |
      Metadata management requests. Theses requests are used to create, update or delete the STAC
      metadata.

      *NOTE: these requests require authentication as described in [here](#tag/Authentication).*
  - name: Asset Upload Management
    description: |
      Asset file can be uploaded via the STAC API using the following requests.

      *NOTE: the POST requests require authentication as described in [here](#tag/Authentication).*

      ### Example

      ```python
      import os
      import hashlib

      import requests
      import multihash

      # variables
      scheme = 'https'
      hostname = 'data.geo.admin.ch'
      collection = 'ch.swisstopo.pixelkarte-farbe-pk200.noscale'
      item = 'smr200-200-4-2016'
      asset = 'smr200-200-4-2016-2056-kgrs-10.tiff'
      asset_path = f'collections/{collection}/items/{item}/assets/{asset}'
      user = os.environ.get('STAC_USER', 'unknown-user')
      password = os.environ.get('STAC_PASSWORD', 'unknown-password')

      with open('smr200-200-4-2016-2056-kgrs-10.tiff', 'rb') as fd:
        data = fd.read()

      checksum_multihash = multihash.to_hex_string(multihash.encode(hashlib.sha256(data).digest(), 'sha2-256'))

      # 1. Create a multipart upload
      response = requests.post(
        f"{scheme}://{hostname}/api/stac/v0.9/{asset_path}/uploads",
        auth=(user, password),
        json={
          "number_parts": 1,
          "checksum:multihash": checksum_multihash
        }
      )
      upload_id = response.json()['upload_id']

      # 2. Upload the part using the presigned url
      response = requests.put(response.json()['urls'][0]['url'], data=data)
      etag = response.headers['ETag']

      # 3. Complete the upload
      response = requests.post(
        f"{scheme}://{hostname}/api/stac/v0.9/{asset_path}/uploads/{upload_id}/complete",
        auth=(user, password),
        json={'parts': [{'etag': etag, 'part_number': 1}]}
      )
      ```
  - name: Authentication
    description: |
      All write requests require authentication. There is currently three type of supported authentications:

      * [Session authentication](#section/Session-authentication)
      * [Basic authentication](#section/Basic-authentication)
      * [Token authentication](#section/Token-authentication)

      ## Session authentication

      When using the browsable API the user can simply use the admin interface for logging in.
      Once logged in, the browsable API can be used to perform write requests.

      ## Basic authentication

      The username and password for authentication can be added to every write request the user wants to perform.
      Here is an example of posting an asset using curl (_username_="MickeyMouse", _password_="I_love_Minnie_Mouse"):

      ```
      curl --request POST \
        --user MickeyMouse:I_love_Minnie_Mouse \
        --url https://data.geoadmin.ch/api/stac/v0.9/collections/ch.swisstopo.swisstlmregio/items/swisstlmregio-2020/assets \
        --header 'Content-Type: application/json' \
        --data '{
          "id": "fancy_unique_id",
          "item": "swisstlmregio-2020",
          "title": "My title",
          "type": "application/x.filegdb+zip",
          "description": "My description",
          "proj:epsg": 2056,
          "checksum:multihash": "01205c3fd6978a7d0b051efaa4263a04"
      }'
      ```

      ## Token authentication

      A user specific token for authentication can be added to every write request the user wants to perform.
      Here is an example of posting an asset using curl:

      ```
      curl --request POST \
        --url https://data.geoadmin.ch/api/stac/v0.9/collections/ch.swisstopo.swisstlmregio/items/swisstlmregio-2020/assets \
        --header 'Authorization: Token ccecf40693bfc52ba090cd46eb7f19e723fe831f' \
        --header 'Content-Type: application/json' \
        --data '{
          "id": "fancy_unique_id",
          "item": "swisstlmregio-2020",
          "title": "My title",
          "type": "application/x.filegdb+zip",
          "description": "My description",
          "proj:epsg": 2056,
          "checksum:multihash": "01205c3fd6978a7d0b051efaa4263a04"
      }'
      ```

      Tokens can either be generated in the admin interface or existing users can perform a POST request
      on the get-token endpoint to request a token (also see [Request token for token authentication](#operation/getToken)).
      Here is an example using curl:

      ```
      curl --request POST \
        --url https://data.geoadmin.ch/api/stac/get-token \
        --header 'Content-Type: application/json' \
        --data '{"username": "MickeyMouse", "password": "I_love_Minnie_Mouse"}'
      ```
