openapi: 3.0.1
info:
  contact:
    name: API Specification (based on STAC)
    url: http://data.geo.admin.ch/api/stac/v0.9/
  description: >-
    This is an OpenAPI definition of the API to query and access federal geodata on
    data.geo.admin.ch. The API is based on the core SpatioTemporal Asset Catalog API
    specification [STAC](http://stacspec.org) and adds two extensions for extended
    searching possibilities.


    **Note:** The API is _not_ productively accessible yet, this is a preliminary
    outlook of how it will look like. Minor changes are possible and will be reflected
    in this document.
  title: The SpatioTemporal Asset Catalog API for data.geo.admin.ch
  version: 0.9.0
servers:
- description: Data.geo.admin.ch
  url: http://data.geo.admin.ch/api/stac/v0.9
tags:
- description: Essential characteristics of this API
  name: Capabilities
- description: Access to data (features)
  name: Data
- description: Extension to OGC API - Features to support STAC metadata model and
    search API
  name: STAC
- description: |
    All write requests require authentication. The currently available options for a user to
    authenticate himself are described below.

    # Session authentication
    When using the browsable API the user can simply use the admin interface for logging in.
    Once logged in, the browsable API can be used to perform write requests.

    # Basic authentication
    The username and password for authentication can be added to every write request the user wants to perform.
    Here is an example of posting an asset using curl (_username_="MickeyMouse", _password_="I_love_Minnie_Mouse"):
    ```
    curl --request POST \
      --user MickeyMouse:I_love_Minnie_Mouse \
      --url https://service-stac.dev.bgdi.ch/api/stac/v0.9/collections/ch.swisstopo.swisstlmregio/items/swisstlmregio-2020/assets \
      --header 'Content-Type: application/json' \
      --data '{
        "id": "fancy_unique_id",
        "item": "swisstlmregio-2020",
        "title": "My title",
        "type": "application/x.filegdb+zip",
        "description": "My description",
        "proj:epsg": 2056,
        "checksum:multihash": "01205c3fd6978a7d0b051efaa4263a04"
    }'
    ```

    # Token authentication
    A user specific token for authentication can be added to every write request the user wants to perform.
    Here is an example of posting an asset using curl:
    ```
    curl --request POST \
      --url https://service-stac.dev.bgdi.ch/api/stac/v0.9/collections/ch.swisstopo.swisstlmregio/items/swisstlmregio-2020/assets \
      --header 'Authorization: Token ccecf40693bfc52ba090cd46eb7f19e723fe831f' \
      --header 'Content-Type: application/json' \
      --data '{
        "id": "fancy_unique_id",
        "item": "swisstlmregio-2020",
        "title": "My title",
        "type": "application/x.filegdb+zip",
        "description": "My description",
        "proj:epsg": 2056,
        "checksum:multihash": "01205c3fd6978a7d0b051efaa4263a04"
    }'
    ```
    Tokens can either be generated in the admin interface or existing users can perform a POST request
    on the get-token endpoint to request a token (also see description of the get-token POST endpoint
    at the bottom).
    Here is an example using curl:
    ```
    curl --request POST \
      --url https://service-stac.dev.bgdi.ch/api/stac/v0.9/get-token \
      --header 'Content-Type: application/json' \
      --data '{"username": "MickeyMouse", "password": "I_love_Minnie_Mouse"}'
    ```
  name: Data Management
components:
  parameters:
    bbox:
      description: >-
        Only features that have a geometry that intersects the bounding box are selected.
        The bounding box is provided as four numbers:


        * Lower left corner, coordinate axis 1

        * Lower left corner, coordinate axis 2

        * Upper right corner, coordinate axis 1

        * Upper right corner, coordinate axis 2


        The coordinate reference system of the values is WGS 84 longitude/latitude
        (http://www.opengis.net/def/crs/OGC/1.3/CRS84).


        For WGS 84 longitude/latitude the values are in most cases the sequence of
        minimum longitude, minimum latitude, maximum longitude and maximum latitude.
        However, in cases where the box spans the antimeridian the first value (west-most
        box edge) is larger than the third value (east-most box edge).


        If a feature has multiple spatial geometry properties, it is the decision
        of the server whether only a single spatial geometry property is used to determine
        the extent or all relevant geometries.
      explode: false
      in: query
      name: bbox
      required: false
      schema:
        items:
          type: number
        maxItems: 4
        minItems: 4
        type: array
      style: form
    collectionId:
      description: Local identifier of a collection
      in: path
      name: collectionId
      required: true
      schema:
        type: string
    collectionsArray:
      description: >-
        Array of Collection IDs to include in the search for items. Only Items in
        one of the provided Collections will be searched
      explode: false
      in: query
      name: collections
      required: false
      schema:
        $ref: "#/components/schemas/collectionsArray"
    datetime:
      description: >-
        Either a date-time or an interval, open or closed. Date and time expressions
        adhere to RFC 3339. Open intervals are expressed using double-dots.

        Examples:


        * A date-time: "2018-02-12T23:20:50Z"

        * A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"

        * Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"


        Only features that have a temporal property that intersects the value of `datetime`
        are selected.


        If a feature has multiple temporal properties, it is the decision of the server
        whether only a single temporal property is used to determine the extent or
        all relevant temporal properties.
      explode: false
      in: query
      name: datetime
      required: false
      schema:
        type: string
      style: form
    featureId:
      description: Local identifier of a feature
      in: path
      name: featureId
      required: true
      schema:
        type: string
    ids:
      description: >-
        Array of Item ids to return. All other filter parameters that further restrict
        the number of search results are ignored
      explode: false
      in: query
      name: ids
      required: false
      schema:
        $ref: "#/components/schemas/ids"
    collectionsLimit:
      description: >-
        The optional limit parameter limits the number of collections that are presented
        in the response document.


        To retrieve the next collections result, uses the `next` link from the response.


        Minimum = 1. Maximum = 100. Default = 100.
      explode: false
      in: query
      name: limit
      required: false
      schema:
        default: 100
        maximum: 100
        minimum: 1
        type: integer
      style: form
    itemsLimit:
      description: >-
        The optional limit parameter limits the number of items that are presented
        in the response document.


        Only items are counted that are on the first level of the collection in the
        response document. Nested objects contained within the explicitly requested
        items shall not be counted.


        To retrieve the next items result, uses the `next` link from the response.


        Minimum = 1. Maximum = 100. Default = 100.
      explode: false
      in: query
      name: limit
      required: false
      schema:
        default: 100
        maximum: 100
        minimum: 1
        type: integer
      style: form
    limit:
      description: >-
        The optional limit parameter limits the number of results that are presented
        in the response document.


        To retrieve the next result, uses the `next` link from the response.


        Minimum = 1. Maximum = 100. Default = 100.
      explode: false
      in: query
      name: limit
      required: false
      schema:
        default: 100
        maximum: 100
        minimum: 1
        type: integer
      style: form
    query:
      description: Query for properties in items. Use the JSON form of the queryFilter
        used in POST.
      in: query
      name: query
      required: false
      schema:
        type: string
    IfNoneMatch:
      name: If-None-Match
      in: header
      schema:
        type: string
      description: >-
        The RFC7232 `If-None-Match` header field makes the GET request method conditional.
        It is composed of a comma separated list of ETags or value "*".


        The server compares the client's ETags (sent with `If-None-Match`) with the
        ETag for its current version of the resource, and if both values match (that
        is, the resource has not changed), the server sends back a `304 Not Modified`
        status, without a body, which tells the client that the cached version of
        the response is still good to use (fresh).
      example: "d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b"
    IfMatch:
      name: If-Match
      in: header
      schema:
        type: string
      description: >-
        The RFC7232 `If-Match` header field makes the GET request method conditional.
        It is composed of a comma separated list of ETags or value "*".


        The server compares the client's ETags (sent with `If-Match`) with the ETag
        for its current version of the resource, and if both values don't match (that
        is, the resource has changed), the server sends back a `412 Precondition Failed`
        status, without a body, which tells the client that the cached version of
        the response is not good to use anymore.
      example: "d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b"
    assetId:
      name: assetId
      in: path
      description: Local identifier of a asset
      required: true
      schema:
        type: string
    IfMatchWrite:
      name: If-Match
      in: header
      schema:
        type: string
      description: >-
        The RFC7232 `If-Match` header field makes the PUT/PATCH/DEL request method
        conditional. It is composed of a comma separated list of ETags or value "*".


        The server compares the client's ETags (sent with `If-Match`) with the ETag
        for its current version of the resource, and if both values don't match (that
        is, the resource has changed), the server sends back a `412 Precondition Failed`
        status, without a body, which tells the client that he would overwrite another
        changes of the resource.
      example: "d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b"
  responses:
    Collection:
      headers:
        ETag:
          $ref: "#/components/schemas/ETag"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/collection"
      description: >-
        Information about the feature collection with id `collectionId`.


        The response contains a link to the items in the collection (path `/collections/{collectionId}/items`,
        link relation `items`) as well as key information about the collection. This
        information includes:


        * A local identifier for the collection that is unique for the dataset

        * A list of coordinate reference systems (CRS) in which geometries may be
        returned by the server. The first CRS is the default coordinate reference
        system (the default is always WGS 84 with axis order longitude/latitude)

        * An optional title and description for the collection

        * An optional extent that can be used to provide an indication of the spatial
        and temporal extent of the collection - typically derived from the data

        * An optional indicator about the type of the items in the collection (the
        default value, if the indicator is not provided, is 'feature')
    Collections:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/collections"
      description: >-
        The feature collections shared by this API.


        The dataset is organized as one or more feature collections. This resource
        provides information about and access to the collections.


        The response contains the list of collections. For each collection, a link
        to the items in the collection (path `/collections/{collectionId}/items`,
        link relation `items`) as well as key information about the collection. This
        information includes:


        * A local identifier for the collection that is unique for the dataset

        * A list of coordinate reference systems (CRS) in which geometries may be
        returned by the server. The first CRS is the default coordinate reference
        system (the default is always WGS 84 with axis order longitude/latitude)

        * An optional title and description for the collection

        * An optional extent that can be used to provide an indication of the spatial
        and temporal extent of the collection - typically derived from the data

        * An optional indicator about the type of the items in the collection (the
        default value, if the indicator is not provided, is 'feature').

        The `limit` parameter may be used to control the subset of the selected collections
        that should be returned in the response, the page size. Each page include
        links to support paging (link relation `next` and/or `previous`).
    ConformanceDeclaration:
      content:
        application/json:
          example:
            conformsTo:
            - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core
            - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30
            - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson
          schema:
            $ref: "#/components/schemas/confClasses"
      description: >-
        The URIs of all conformance classes supported by the server.


        To support "generic" clients that want to access multiple OGC API Features
        implementations - and not "just" a specific API / server, the server declares
        the conformance classes it implements and conforms to.
    Feature:
      headers:
        ETag:
          $ref: "#/components/schemas/ETag"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/item"
      description: >-
        Fetch the feature with id `featureId` in the feature collection with id `collectionId`
    Features:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/items"
      description: >-
        The response is a document consisting of features in the collection. The features
        included in the response are determined by the server based on the query parameters
        of the request. To support access to larger collections without overloading
        the client, the API supports paged access with links to the next page, if
        more features are selected that the page size.


        The `bbox` and `datetime` parameter can be used to select only a subset of
        the features in the collection (the features that are in the bounding box
        or time interval). The `bbox` parameter matches all features in the collection
        that are not associated with a location, too. The `datetime` parameter matches
        all features in the collection that are not associated with a time stamp or
        interval, too.


        The `limit` parameter may be used to control the subset of the selected features
        that should be returned in the response, the page size. Each page include
        links to support paging (link relation `next` and/or `previous`).
    NotModified:
      description: The cached resource was not modified since last request.
    InvalidParameter:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/exception"
          example:
            code: 400
            description: "Invalid parameter"
      description: A query parameter has an invalid value.
    LandingPage:
      content:
        application/json:
          example:
            description: Catalog of Swiss Geodata Downloads
            id: ch
            links:
            - href: http://data.geo.admin.ch/api/stac/v0.9/
              rel: self
              type: application/json
              title: this document
            - href: http://data.geo.admin.ch/api/stac/v0.9/static/api.html
              rel: service-doc
              type: text/html
              title: the API documentation
            - href: http://data.geo.admin.ch/api/stac/v0.9/conformance
              rel: conformance
              type: application/json
              title: OGC API conformance classes implemented by this server
            - href: http://data.geo.admin.ch/api/stac/v0.9/collections
              rel: data
              type: application/json
              title: Information about the feature collections
            - href: http://data.geo.admin.ch/api/stac/v0.9/search
              rel: search
              type: application/json
              title: Search across feature collections
            stac_version: 0.9.0
            title: data.geo.admin.ch
          schema:
            $ref: "#/components/schemas/landingPage"
      description: >-
        The landing page provides links to the API definition (link relations `service-desc`
        and `service-doc`), the Conformance declaration (path `/conformance`, link
        relation `conformance`), and the Feature Collections (path `/collections`,
        link relation `data`).
    NotFound:
      description: The specified resource/URI was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/exception"
          example:
            code: 404
            description: "Resource not found"
    PreconditionFailed:
      description: Some condition specified by the request could not be met in the
        server
    ServerError:
      description: >-
        The request was syntactically and semantically valid, but an error occurred
        while trying to act upon it
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/exception"
          example:
            code: 500
            description: "Internal server error"
    Assets:
      description: >-
        The response is a document consisting of all assets of the feature.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/assets"
    Asset:
      description: >-
        The response is a document consisting of one asset of the feature.
      headers:
        ETag:
          $ref: "#/components/schemas/ETag"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/itemAsset"
    DeletedResource:
      description: Status of the delete resource
      content:
        application/json:
          schema:
            description: >-
              Information about the deleted resource and a link to the parent resource
            type: object
            properties:
              code:
                type: int
                example: 200
              description:
                type: string
                example: Resource successfully deleted
              links:
                type: array
                items:
                  $ref: "#/components/schemas/link"
                description: >-
                  The array contain at least a link to the parent resource (`rel:
                  parent`).
                example:
                - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items
                  rel: parent
            required:
            - code
            - links
    BadRequest:
      description: The request was malformed or semantically invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/exception"
          example:
            code: 400
            description: "Invalid parameter"
    PermissionDenied:
      description: No Permission for this request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/exception"
          example:
            code: 403
            description: "Permission denied"
  schemas:
    bbox:
      description: >-
        Only features that have a geometry that intersects the bounding box are selected.
        The bounding box is provided as four numbers:


        * Lower left corner, coordinate axis 1

        * Lower left corner, coordinate axis 2

        * Upper right corner, coordinate axis 1

        * Upper right corner, coordinate axis 2


        The coordinate reference system of the values is WGS84 longitude/latitude
        (http://www.opengis.net/def/crs/OGC/1.3/CRS84).


        For WGS84 longitude/latitude the values are in most cases the sequence of
        minimum longitude, minimum latitude, maximum longitude and maximum latitude.
        However, in cases where the box spans the antimeridian the first value (west-most
        box edge) is larger than the third value (east-most box edge).


        If a feature has multiple spatial geometry properties, it is the decision
        of the server whether only a single spatial geometry property is used to determine
        the extent or all relevant geometries.

        Example: The bounding box of Switzerland in WGS 84 (from 5.96°E to 10.49°E
        and from 45.82°N to 47.81°N) would be represented in JSON as `[5.96, 45.82,
        10.49, 47.81]` and in a query as `bbox=5.96, 45.82, 10.49, 47.81`."
      example:
      - 5.96
      - 45.82
      - 10.49
      - 47.81
      items:
        type: number
      maxItems: 4
      minItems: 4
      type: array
      readOnly: true
    bboxFilter:
      description: Only return items that intersect the provided bounding box.
      properties:
        bbox:
          $ref: "#/components/schemas/bbox"
      type: object
      example:
        bbox:
        - 5.96
        - 45.82
        - 10.49
        - 47.81
    checksum:multihash:
      description: >-
        `sha2-256` or `md5` checksum of the asset in [multihash](https://multiformats.io/multihash/)
        format.
      example: 90e402107a7f2588a85362b9beea2a12d4514d45
      pattern: ^[a-f0-9]+$
      title: Multihash
      type: string,
    created:
      description: RFC 3339 compliant datetime string, time when the object was created
      example: 2018-02-12T23:20:50Z
      type: string
      format: date-time
      readOnly: true
    collection:
      properties:
        crs:
          default:
          - http://www.opengis.net/def/crs/OGC/1.3/CRS84
          description: The list of coordinate reference systems supported by the service
          example:
          - http://www.opengis.net/def/crs/OGC/1.3/CRS84
          items:
            type: string
          type: array
          readOnly: true
        description:
          schema:
            $ref: "#/components/schemas/description"
          description: A description of the features in the collection
          example: >-
            Swiss Map Raster are a conversion of the map image into a digital form
            with no direct bearing on the individual map elements.


            The information is structured only in colour layers. Swiss Map Raster
            pixel maps are ideal for finding background information for a broad variety
            of screen applications, web and mobile applications and services, as well
            as for geographic information systems. They can also be used as basic
            maps for a variety of purposes (digital printing, plots, offset printing,
            etc.).
          type: string
        extent:
          $ref: "#/components/schemas/extent"
        id:
          description: Identifier of the collection used, for example, in URIs
          example: ch.swisstopo.pixelkarte-farbe-pk200.noscale
          type: string
        itemType:
          default: Feature
          description: >-
            Indicator about the type of the items in the collection (the default value
            is 'Feature').
          type: string
          readOnly: true
        license:
          $ref: "#/components/schemas/license"
        links:
          example:
          - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale
            rel: self
          - href: https://data.geo.admin.ch/api/stac/v0.9/
            rel: root
          - href: https://data.geo.admin.ch/api/stac/v0.9/collections
            rel: parent
          - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items
            rel: items
          - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html
            rel: license
            title: Licence for the free geodata of the Federal Office of Topography
              swisstopo
          - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df
            rel: describedby
          items:
            $ref: "#/components/schemas/link"
          type: array
        providers:
          $ref: "#/components/schemas/providers"
        stac_extensions:
          $ref: "#/components/schemas/stac_extensions"
        stac_version:
          $ref: "#/components/schemas/stac_version"
        summaries:
          additionalProperties:
            oneOf:
            - items:
                description: A value of any type.
              title: Set of values
              type: array
            - description: >-
                By default, only ranges with a minimum and a maximum value can be
                specified. Ranges can be specified for ordinal values only, which
                means they need to have a rank order. Therefore, ranges can only be
                specified for numbers and some special types of strings. Examples:
                grades (A to F), dates or times. Implementors are free to add other
                derived statistical values to the object, for example `mean` or `stddev`.
              properties:
                max:
                  anyOf:
                  - type: string
                  - type: number
                min:
                  anyOf:
                  - type: string
                  - type: number
              required:
              - min
              - max
              title: Statistics
              type: object
          description: >-
            Summaries are either a unique set of all available values *or* statistics.
            Statistics by default only specify the range (minimum and maximum values),
            but can optionally be accompanied by additional statistical values. The
            range can specify the potential range of values, but it is recommended
            to be as precise as possible. The set of values must contain at least
            one element and it is strongly recommended to list all values. It is recommended
            to list as many properties as reasonable so that consumers get a full
            overview of the Collection. Properties that are covered by the Collection
            specification (e.g. `providers` and `license`) may not be repeated in
            the summaries.
          type: object
          readOnly: true
          example:
            eo:gsd:
            - 10
            - 20
            geoadmin:variant:
            - kgrel
            - komb
            - krel
            proj:epsg:
            - 2056
        title:
          description: Human readable title of the collection
          example: National Map 1:200'000
          type: string
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
      required:
      - id
      - links
      - stac_version
      - description
      - license
      - extent
      - created
      - updated
      type: object
    collections:
      properties:
        collections:
          items:
            $ref: "#/components/schemas/collection"
          type: array
        links:
          items:
            $ref: "#/components/schemas/link"
          example:
          - href: https://data.geo.admin.ch/api/stac/v0.9/collections
            rel: self
          - href: https://data.geo.admin.ch/api/stac/v0.9/
            rel: root
          - href: https://data.geo.admin.ch/api/stac/v0.9/collections?cursor=10ab
            rel: next
          - href: https://data.geo.admin.ch/api/stac/v0.9/collections?cursor=10cd
            rel: previous
      required:
      - links
      - collections
      type: object
    collectionsArray:
      description: >-
        Array of Collection IDs to include in the search for items. Only Items in
        one of the provided Collections will be searched.
      items:
        type: string
      type: array
    collectionsFilter:
      description: Only returns the collections specified
      properties:
        collections:
          $ref: "#/components/schemas/collectionsArray"
      type: object
      example:
        collections:
        - ch.swisstopo.swisstlmregio
        - ch.bfe.energieschweiz
    confClasses:
      properties:
        conformsTo:
          items:
            type: string
          type: array
      required:
      - conformsTo
      type: object
    datetime:
      description: RFC 3339 compliant datetime string
      example: 2018-02-12T23:20:50Z
      type: string
    datetimeFilter:
      description: An object representing a date+time based filter.
      properties:
        datetime:
          $ref: "#/components/schemas/datetime"
      type: object
    description:
      description: >-
        Detailed multi-line description to fully explain the object (collection, item,
        asset, ...).

        [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text
        representation.
      type: string
    eo:gsd:
      description: >-
        GSD is the nominal Ground Sample Distance for the data, as measured in meters
        on the ground.


        There are many definitions of GSD. The value of this attribute should be related
        to the spatial resolution at the sensor, rather than the pixel size of images
        after ortho-rectification, pansharpening, or scaling. The GSD of a sensor
        can vary depending on off-nadir and wavelength, so it is at the discretion
        of the implementer to decide which value most accurately represents the GSD.
        For example, Landsat8 optical and short-wave IR bands are all 30 meters, but
        the panchromatic band is 15 meters. The eo:gsd should be 30 meters in this
        case because that is nominal spatial resolution at the sensor. The Planet
        PlanetScope Ortho Tile Product has an eo:gsd of 3.7 (or 4 if rounding), even
        though the pixel size of the images is 3.125. For example, one might choose
        for WorldView-2 the Multispectral 20° off-nadir value of 2.07 and for WorldView-3
        the Multispectral 20° off-nadir value of 1.38.
      example: 2.5
      title: Ground Sample Distance
      type: number
    exception:
      description: >-
        Information about the exception: an error code plus an optional description.
      properties:
        code:
          type: int
          example: 500
        description:
          anyOf:
          - type: string
          - type: array
            items:
              anyOf:
              - type: string
              - type: object
          - type: object
      required:
      - code
      type: object
    extent:
      description: >-
        The extent of the features in the collection. In the Core only spatial and
        temporal extents are specified. Extensions may add additional members to represent
        other extents, for example, thermal or pressure ranges.
      properties:
        spatial:
          description: The spatial extent of the features in the collection.
          properties:
            bbox:
              description: >-
                One or more bounding boxes that describe the spatial extent of the
                dataset. In the Core only a single bounding box is supported. Extensions
                may support additional areas. If multiple areas are provided, the
                union of the bounding boxes describes the spatial extent.
              items:
                description: >-
                  Each bounding box is provided as four or six numbers, depending
                  on whether the coordinate reference system includes a vertical axis
                  (height or depth):


                  * Lower left corner, coordinate axis 1

                  * Lower left corner, coordinate axis 2

                  * Upper right corner, coordinate axis 1

                  * Upper right corner, coordinate axis 2


                  The coordinate reference system of the values is WGS 84 longitude/latitude
                  (http://www.opengis.net/def/crs/OGC/1.3/CRS84).


                  For WGS 84 longitude/latitude the values are in most cases the sequence
                  of minimum longitude, minimum latitude, maximum longitude and maximum
                  latitude. However, in cases where the box spans the antimeridian
                  the first value (west-most box edge) is larger than the third value
                  (east-most box edge).


                  If the vertical axis is included, the third and the sixth number
                  are the bottom and the top of the 3-dimensional bounding box.


                  If a feature has multiple spatial geometry properties, it is the
                  decision of the server whether only a single spatial geometry property
                  is used to determine the extent or all relevant geometries.
                example:
                - 5.685114
                - 45.534903
                - 10.747775
                - 47.982586
                items:
                  type: number
                maxItems: 6
                minItems: 4
                type: array
              minItems: 1
              type: array
          required:
          - bbox
          type: object
        temporal:
          description: The temporal extent of the features in the collection.
          properties:
            interval:
              description: >-
                One time interval that describe the temporal extent of the dataset.
              items:
                description: >-
                  Begin and end times of the time interval.
                example:
                - "2019-01-01T00:00:00Z"
                - "2019-01-02T00:00:00Z"
                items:
                  format: date-time
                  nullable: false
                  type: string
                maxItems: 2
                minItems: 2
                type: array
              minItems: 1
              maxItems: 1
              type: array
          required:
          - interval
          type: object
      required:
      - spatial
      - temporal
      type: object
      readOnly: true
    geoadmin:lang:
      enum:
      - de
      - it
      - fr
      - rm
      - en
      title: Product language
      type: string
    geoadmin:variant:
      example: komb
      title: Product variants
      type: string
    geometryGeoJSON:
      oneOf:
      - $ref: "#/components/schemas/polygonGeoJSON"
    geometrycollectionGeoJSON:
      properties:
        geometries:
          items:
            $ref: "#/components/schemas/geometryGeoJSON"
          type: array
        type:
          enum:
          - GeometryCollection
          type: string
      required:
      - type
      - geometries
      type: object
    ids:
      description: >-
        Array of Item ids to return. All other filter parameters that further restrict
        the number of search results are ignored
      items:
        type: string
      type: array
    idsFilter:
      description: Only returns items that match the array of given ids
      properties:
        ids:
          $ref: "#/components/schemas/ids"
      type: object
      example:
        ids:
        - swisstlmregio-2019
        - swisstlmregio-2020
    intersectsFilter:
      description: Only returns items that intersect with the provided polygon.
      properties:
        intersects:
          $ref: https://geojson.org/schema/Geometry.json
      type: object
      example:
        intersects:
          type: "Point"
          coordinates:
          - 7
          - 46
    itemBase:
      description: >-
        A GeoJSON Feature augmented with foreign members that contain values relevant
        to a STAC entity
      properties:
        assets:
          $ref: "#/components/schemas/itemAssets"
        bbox:
          $ref: "#/components/schemas/bbox"
        geometry:
          $ref: "#/components/schemas/geometryGeoJSON"
        properties:
          $ref: "#/components/schemas/itemProperties"
        stac_extensions:
          $ref: "#/components/schemas/stac_extensions"
          readOnly: true
        stac_version:
          $ref: "#/components/schemas/stac_version"
          readOnly: true
        type:
          $ref: "#/components/schemas/itemType"
      required:
      - stac_version
      - type
      - geometry
      - bbox
      - properties
      - assets
      type: object
    item:
      allOf:
      - type: object
        required:
        - id
        - links
        properties:
          id:
            $ref: "#/components/schemas/itemId"
          links:
            items:
              $ref: "#/components/schemas/link"
            type: array
            example:
            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr50-263-2016
              rel: self
            - href: https://data.geo.admin.ch/api/stac/v0.9/
              rel: root
            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items
              rel: parent
            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale
              rel: collection
      - $ref: "#/components/schemas/itemBase"
    items:
      description: >-
        A FeatureCollection augmented with foreign members that contain values relevant
        to a STAC entity
      properties:
        features:
          items:
            $ref: "#/components/schemas/item"
          type: array
        links:
          items:
            $ref: "#/components/schemas/link"
          type: array
          example:
          - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items
            rel: self
          - href: https://data.geo.admin.ch/api/stac/v0.9/
            rel: root
          - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale
            rel: parent
          - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items?cursor=10ab
            rel: next
          - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items?cursor=10acd
            rel: previous
        type:
          enum:
          - FeatureCollection
          type: string
      required:
      - features
      - type
      type: object
    itemAssets:
      additionalProperties:
        properties:
          created:
            $ref: "#/components/schemas/created"
          description:
            description: >-
              Multi-line description to explain the asset.


              [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich
              text representation.
            example: Small 256x256px PNG thumbnail for a preview.
            type: string
          href:
            description: Link to the asset object
            example: http://cool-sat.com/catalog/collections/cs/items/CS3-20160503_132130_04/thumb.png
            format: url
            type: string
          title:
            description: Displayed title
            example: Thumbnail
            type: string
          type:
            description: Media type of the asset
            example: image/png
            type: string
          proj:epsg:
            $ref: "#/components/schemas/proj:epsg"
          geoadmin:variant:
            $ref: "#/components/schemas/geoadmin:variant"
          eo:gsd:
            $ref: "#/components/schemas/eo:gsd"
          updated:
            $ref: "#/components/schemas/created"
        required:
        - "checksum:multihash"
        - href
        - type
        - created
        - updated
        type: object
      type: object
      readOnly: true
      example:
        smr50-263-2016-2056-kgrs-2.5.tiff:
          checksum:multihash: 90e402107a7f2588a85362b9beea2a12d4514d45
          created: "2020-07-14T12:30:00Z"
          eo:gsd: 2.5
          geoadmin:variant: kgrs
          href: https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr50-263-2016-2056-kgrs-2.5.tiff
          proj:epsg: 2056
          type: image/tiff; application=geotiff
          updated: "2020-07-14T12:30:00Z"
        smr50-263-2016-2056-komb-2.5.tiff:
          checksum:multihash: 90d402107a7f2588a85362b9beea2a12d4514d45
          created: "2020-07-14T12:30:00Z"
          eo:gsd: 2.5
          geoadmin:variant: komb
          href: https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr50-263-2016-2056-komb-2.5.tiff
          proj:epsg: "2056"
          type: image/tiff; application=geotiff
          updated: "2020-07-14T12:30:00Z"
        smr50-263-2016-2056-krel-2.5.tiff:
          checksum:multihash: 90f402107a7f2588a85362b9beea2a12d4514d45
          created: "2020-07-14T12:30:00Z"
          eo:gsd: 2.5
          geoadmin:variant: krel
          href: https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr50-263-2016-2056-krel-2.5.tiff
          proj:epsg: "2056"
          type: image/tiff; application=geotiff
          updated: "2020-07-14T12:30:00Z"
    itemCollection:
      description: >-
        A GeoJSON FeatureCollection augmented with foreign members that contain values
        relevant to a STAC entity
      properties:
        features:
          items:
            $ref: "#/components/schemas/item"
          type: array
        links:
          $ref: "#/components/schemas/itemCollectionLinks"
        type:
          enum:
          - FeatureCollection
          type: string
      required:
      - features
      - type
      type: object
    itemCollectionLinks:
      description: >-
        An array of links. Can be used for pagination, e.g. by providing a link with
        the `next` relation type.
      example:
      - href: https://data.geo.admin.ch/api/stac/v0.9/search
        rel: self
      - href: https://data.geo.admin.ch/api/stac/v0.9/search?cursor=10ab
        rel: next
      items:
        $ref: "#/components/schemas/link"
      type: array
    itemId:
      description: Item identifier (unique per collection)
      example: smr200-200-4-2019
      type: string
    itemProperties:
      description: >-
        Provides the core metadata fields plus extensions


        The item's data timing information can be specified either with

        * One datetime value in the field `datetime`

        * A datetime range with a `start_datetime` and an `end_datetime`


        One of the two is required
      properties:
        created:
          $ref: "#/components/schemas/created"
        datetime:
          $ref: "#/components/schemas/datetime"
        start_datetime:
          $ref: "#/components/schemas/datetime"
        end_datetime:
          $ref: "#/components/schemas/datetime"
        updated:
          $ref: "#/components/schemas/updated"
        title:
          description: Human readable title of the Feature
          example: Feature title
          type: string
      required:
      - created
      - updated
      type: object
    itemType:
      description: The GeoJSON type
      enum:
      - Feature
      type: string
      readOnly: true
    landingPage:
      properties:
        description:
          example: >-
            Access to data about buildings in the city of Bonn via a Web API that
            conforms to the OGC API Features specification.
          type: string
        id:
          type: string
        links:
          items:
            $ref: "#/components/schemas/link"
          type: array
        stac_extensions:
          $ref: "#/components/schemas/stac_extensions"
        stac_version:
          $ref: "#/components/schemas/stac_version"
        title:
          example: Buildings in Bonn
          type: string
      required:
      - links
      - stac_version
      - id
      - description
      type: object
    license:
      description: >-
        License(s) of the data as a SPDX [License identifier](https://spdx.org/licenses/).
        Alternatively, use `proprietary` if the license is not on the SPDX license
        list or `various` if multiple licenses apply. In these two cases links to
        the license texts SHOULD be added, see the `license` link relation type.


        Non-SPDX licenses SHOULD add a link to the license text with the `license`
        relation in the links section. The license text MUST NOT be provided as a
        value of this field. If there is no public license URL available, it is RECOMMENDED
        to host the license text and link to it.
      example: proprietary
      type: string
    limit:
      default: 10
      description: >-
        The optional limit parameter limits the number of collections that are presented
        in the response document.


        To retrieve the next collections result, uses the `next` link from the response.


        Minimum = 1. Maximum = 100. Default = 100.
      example: 20
      maximum: 100
      minimum: 1
      type: integer
    limitFilter:
      description: Only returns maximum number of results (page size)
      properties:
        limit:
          $ref: "#/components/schemas/limit"
      type: object
    linestringGeoJSON:
      properties:
        coordinates:
          items:
            items:
              type: number
            minItems: 2
            type: array
          minItems: 2
          type: array
        type:
          enum:
          - LineString
          type: string
      required:
      - type
      - coordinates
      type: object
    link:
      properties:
        href:
          example: http://data.example.com/buildings/123
          format: url
          type: string
        rel:
          description: >-
            Relationship between the current document and the linked document.


            NOTE: the following relations are reserved and automatically generated:
            `self`, `root`, `parent`, `items`, `collection`, `next`, `previous`
          example: describedby
          type: string
        title:
          example: Trierer Strasse 70, 53115 Bonn
          type: string
        type:
          description: The media type of the link target
          example: application/geo+json
          type: string
      required:
      - href
      - rel
      title: Link
      type: object
    multilinestringGeoJSON:
      properties:
        coordinates:
          items:
            items:
              items:
                type: number
              minItems: 2
              type: array
            minItems: 2
            type: array
          type: array
        type:
          enum:
          - MultiLineString
          type: string
      required:
      - type
      - coordinates
      type: object
    multipointGeoJSON:
      properties:
        coordinates:
          items:
            items:
              type: number
            minItems: 2
            type: array
          type: array
        type:
          enum:
          - MultiPoint
          type: string
      required:
      - type
      - coordinates
      type: object
    multipolygonGeoJSON:
      properties:
        coordinates:
          items:
            items:
              items:
                items:
                  type: number
                minItems: 2
                type: array
              minItems: 4
              type: array
            type: array
          type: array
        type:
          enum:
          - MultiPolygon
          type: string
      required:
      - type
      - coordinates
      type: object
    numberMatched:
      description: >-
        The number of features of the feature type that match the selection parameters
        like `bbox`.
      example: 127
      minimum: 0
      type: integer
    numberReturned:
      description: >-
        The number of features in the feature collection.


        A server may omit this information in a response, if the information about
        the number of features is not known or difficult to compute.


        If the value is provided, the value shall be identical to the number of items
        in the "features" array.
      example: 10
      minimum: 0
      type: integer
    pointGeoJSON:
      properties:
        coordinates:
          items:
            type: number
          minItems: 2
          type: array
        type:
          enum:
          - Point
          type: string
      required:
      - type
      - coordinates
      type: object
    polygonGeoJSON:
      properties:
        coordinates:
          items:
            items:
              items:
                type: number
              minItems: 2
              type: array
            minItems: 4
            type: array
          type: array
        type:
          enum:
          - Polygon
          type: string
      required:
      - type
      - coordinates
      type: object
      example:
        coordinates:
        - - - 7.242974548172171
            - 46.57310580640624
          - - 7.243756483316452
            - 46.35721185723752
          - - 7.698490766144817
            - 46.357085154660915
          - - 7.699524647567326
            - 46.57297861624267
          - - 7.242974548172171
            - 46.57310580640624
        type: Polygon
    proj:epsg:
      description: >-
        A Coordinate Reference System (CRS) is the data reference system (sometimes
        called a 'projection') used by the asset data, and can usually be referenced
        using an EPSG code. If the asset data does not have a CRS, such as in the
        case of non-rectified imagery with Ground Control Points, proj:epsg should
        be set to null. It should also be set to null if a CRS exists, but for which
        there is no valid EPSG code.
      example: 2056
      title: EPSG code.
      type:
      - integer
      - null
    providers:
      description: >-
        A list of providers, which may include all organizations capturing or processing
        the data or the hosting provider. Providers should be listed in chronological
        order with the most recent provider being the last element of the list.
      items:
        properties:
          description:
            description: >-
              Multi-line description to add further provider information such as processing
              details for processors and producers, hosting details for hosts or basic
              contact information.


              CommonMark 0.29 syntax MAY be used for rich text representation.
            type: string
          name:
            description: The name of the organization or the individual.
            type: string
          roles:
            description: >-
              Roles of the provider.


              The provider's role(s) can be one or more of the following elements:


              * licensor: The organization that is licensing the dataset under


                the license specified in the collection's license field.

              * producer: The producer of the data is the provider that


                initially captured and processed the source data, e.g. ESA for
                Sentinel-2 data.

              * processor: A processor is any provider who processed data to a


                derived product.

              * host: The host is the actual provider offering the data on their


                storage. There should be no more than one host, specified as last
                element of the list.
            items:
              enum:
              - producer
              - licensor
              - processor
              - host
              type: string
            type: array
          url:
            description: >-
              Homepage on which the provider describes the dataset and publishes contact
              information.
            format: url
            type: string
        required:
        - name
        title: Provider
        type: object
      type: array
      example:
      - name: Federal Office of Topography - swisstopo
        roles:
        - producer
        - licensor
        url: https://www.swisstopo.admin.ch
    query:
      additionalProperties:
        $ref: "#/components/schemas/queryProp"
      description: Define which properties to query and the operations to apply
      example:
        title:
          eq: "Swissregio"
          contains: "Swiss"
        datetime:
          lte: "2021-01-01T00:00:00.000Z"
      type: object
    queryFilter:
      description: Allows users to query properties for specific values
      properties:
        query:
          $ref: "#/components/schemas/query"
      type: object
    queryProp:
      anyOf:
      - description: >-
          If the object doesn't contain any of the operators, it is equivalent to
          using the equals operator
      - description: Match using an operator
        properties:
          contains:
            description: >-
              Find items with a property that contains the specified literal string,
              e.g., matches ".*<STRING>.*". A case-insensitive comparison must be
              performed.
            type: string
          endsWith:
            description: >-
              Find items with a property that ends with the specified string. A case-insensitive
              comparison must be performed.
            type: string
          eq:
            description: >-
              Find items with a property that is equal to the specified value. For
              strings, a case-insensitive comparison must be performed.
            nullable: true
            oneOf:
            - type: string
            - type: number
            - type: boolean
          gt:
            description: Find items with a property value greater than the specified
              value.
            oneOf:
            - format: date-time
              type: string
            - type: number
          gte:
            description: Find items with a property value greater than or equal the
              specified value.
            oneOf:
            - format: date-time
              type: string
            - type: number
          in:
            description: >-
              Find items with a property that equals at least one entry in the specified
              array. A case-insensitive comparison must be performed.
            items:
              oneOf:
              - type: string
              - type: number
            type: array
          lt:
            description: Find items with a property value less than the specified
              value.
            oneOf:
            - format: date-time
              type: string
            - type: number
          lte:
            description: Find items with a property value less than or equal the specified
              value.
            oneOf:
            - format: date-time
              type: string
            - type: number
          neq:
            description: >-
              Find items that *don't* contain the specified value. For strings, a
              case-insensitive comparison must be performed.
            nullable: true
            oneOf:
            - type: string
            - type: number
            - type: boolean
          startsWith:
            description: >-
              Find items with a property that begins with the specified string. A
              case-insensitive comparison must be performed.
            type: string
        type: object
      description: Apply query operations to a specific property
    searchBody:
      allOf:
      - $ref: "#/components/schemas/queryFilter"
      - $ref: "#/components/schemas/bboxFilter"
      - $ref: "#/components/schemas/datetimeFilter"
      - $ref: "#/components/schemas/intersectsFilter"
      - $ref: "#/components/schemas/collectionsFilter"
      - $ref: "#/components/schemas/idsFilter"
      - $ref: "#/components/schemas/limitFilter"
      description: The search criteria
      type: object
    stac_extensions:
      items:
        anyOf:
        - format: uri
          title: Reference to a JSON Schema
          type: string
        - title: Reference to a core extension
          type: string
      title: STAC extensions
      type: array
      uniqueItems: true
      readOnly: true
      example:
      - proj
      - eo
      - https://data.geo.admin.ch/stac/v0.9/geoadmin-extension/1.0/schema.json
    stac_version:
      example: 0.9.0
      title: STAC version
      type: string
      readOnly: true
    timeStamp:
      description: This property indicates the time and date when the response was
        generated.
      example: "2017-08-17T08:05:32Z"
      format: date-time
      type: string
    updated:
      description: RFC 3339 compliant datetime string, time when the object was updated
      example: 2018-02-12T23:20:50Z
      type: string
      format: date-time
      readOnly: true
    ETag:
      schema:
        type: string
      description: >-
        The RFC7232 ETag header field in a response provides the current entity- tag
        for the selected resource. An entity-tag is an opaque identifier for different
        versions of a resource over time, regardless whether multiple versions are
        valid at the same time. An entity-tag consists of an opaque quoted string,
        possibly prefixed by a weakness indicator.
      example: "d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b"
      required: true
    assetId:
      type: string
      pattern: ^[a-z0-9.-_]+$
      title: asset id
      description: >-
        The asset id uniquely identifies the asset for an item


        **Note**: `id` must be unique for the item and must be identical to the filename.
      example: smr50-263-2016-2056-kgrs-2.5.tiff
    updateAssetId:
      type: string
      pattern: ^[a-z0-9.-_]+$
      title: asset id
      description: >-
        The asset id uniquely identifies the asset for an item


        **Note**: `id` must be unique for the item and must be identical to the filename.
        When the `id` doesn't match the parameter `assetId`, the asset is renamed,
        renaming also the object itself on S3.
      example: smr50-263-2016-2056-kgrs-2.5.tiff
    assets:
      type: object
      properties:
        assets:
          items:
            $ref: "#/components/schemas/itemAsset"
          type: array
        links:
          items:
            $ref: "#/components/schemas/link"
          type: array
          example:
          - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets
            rel: self
          - href: https://data.geo.admin.ch/api/stac/v0.9/
            rel: root
          - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019
            rel: parent
          - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019
            rel: item
          - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale
            rel: collection
    assetBase:
      type: object
      required:
      - created
      - updated
      properties:
        id:
          $ref: "#/components/schemas/assetId"
        title:
          $ref: "#/components/schemas/title"
        description:
          $ref: "#/components/schemas/description"
        type:
          $ref: "#/components/schemas/type"
        geoadmin:variant:
          $ref: "#/components/schemas/geoadmin:variant"
        geoadmin:lang:
          $ref: "#/components/schemas/geoadmin:lang"
        proj:epsg:
          $ref: "#/components/schemas/proj:epsg"
        eo:gsd:
          $ref: "#/components/schemas/eo:gsd"
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
    itemAsset:
      allOf:
      - $ref: "#/components/schemas/assetBase"
      - type: object
        required:
        - id
        - type
        - href
        - checksum:multihash
        - links
        properties:
          checksum:multihash:
            $ref: "#/components/schemas/checksum:multihash"
          href:
            $ref: "#/components/schemas/href"
          links:
            items:
              $ref: "#/components/schemas/link"
            type: array
            example:
            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets/smr50-263-2016-2056-kgrs-2.5.tiff
              rel: self
            - href: https://data.geo.admin.ch/api/stac/v0.9/
              rel: root
            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets
              rel: parent
            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019
              rel: item
            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale
              rel: collection
    itemAssetWrite:
      allOf:
      - $ref: "#/components/schemas/assetBase"
      - type: object
        required:
        - id
        - type
        properties:
          checksum:multihash:
            $ref: "#/components/schemas/writeChecksumMultihash"
    itemAssetUpdate:
      allOf:
      - $ref: "#/components/schemas/assetBase"
      - type: object
        required:
        - id
        - type
        properties:
          id:
            $ref: "#/components/schemas/updateAssetId"
    itemAssetPartialUpdate:
      allOf:
      - $ref: "#/components/schemas/assetBase"
      - type: object
        properties:
          id:
            $ref: "#/components/schemas/updateAssetId"
    writeChecksumMultihash:
      description: >-
        `sha2-256` or `md5` checksum of the asset in [multihash](https://multiformats.io/multihash/)
        format.


        When provided the asset Object located at href will be checked against this
        checksum and the request is rejected if the checksum don't match.
      example: 90e402107a7f2588a85362b9beea2a12d4514d45
      pattern: ^[a-f0-9]+$
      title: Multihash
      type: string,
    writeHref:
      type: string
      format: url
      description: >-
        URL of the current location of the asset object.


        The url must be publicly accessible. If the URL corresponds already to the
        correct location of the asset object on s3, the checksum of the payload and
        the object on s3 are compared and if matching the request will be accepted.


        If the URL is different from the location that the asset object should have
        according to the the pattern `/<collection_id>/<item_id>/<asset_id>`, the
        service will move the asset from this temporary location to the correct one.
      default: https://data.geo.admin.ch/<collection-id>/<item-id>/<asset-id>
      example: >-
        http://data.geo.admin.ch/tmp/gdwh/ch.swisstopo.swissimage/CS3-20160503_132130_04.png
    href:
      type: string
      format: url
      description: Link to the asset object
      example: >-
        http://data.geo.admin.ch/ch.swisstopo.swissimage/collections/cs/items/CS3-20160503_132130_04/thumb.png
    writeItem:
      allOf:
      - $ref: "#/components/schemas/itemBase"
      - type: object
        properties:
          links:
            items:
              $ref: "#/components/schemas/link"
            type: array
            description: >-
              Add additional link to the generated ones (`self`, `root`, `parent`,
              `items`, `collection`, `next`, `previous`)
    createItem:
      allOf:
      - type: object
        required:
        - id
        properties:
          id:
            $ref: "#/components/schemas/itemId"
      - $ref: "#/components/schemas/writeItem"
    updateItem:
      allOf:
      - type: object
        required:
        - id
        properties:
          id:
            $ref: "#/components/schemas/itemIdUpdate"
      - $ref: "#/components/schemas/writeItem"
    partialItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/itemIdUpdate"
        geometry:
          $ref: "https://geojson.org/schema/Geometry.json"
        properties:
          $ref: "#/components/schemas/itemProperties"
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
          description: >-
            Add/update additional link to the generated ones (`self`, `root`, `parent`,
            `items`, `collection`, `next`, `previous`)
      example:
        properties:
          datetime: "2016-05-03T13:22:30.040Z"
    partialCollection:
      type: object
      description: Allows for a set of partial metadata fields for a collection
      properties:
        id:
          description: Identifier of the collection used, for example, in URIs
          type: string
          example: ch.swisstopo.pixelkarte-farbe-pk200.noscale
        title:
          description: Human readable title of the collection
          type: string
          example: National Map 1:200'000
        description:
          description: A description of the features in the collection
          type: string
          example: The National Map 1:200,000 is a topographic map giving an overview
            of Switzerland.
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
          example:
          - href: http://data.example.com/buildings
            rel: item
          - href: http://example.com/concepts/buildings.html
            rel: describedBy
            type: text/html
        extent:
          $ref: "#/components/schemas/extent"
        itemType:
          description: >-
            Indicator about the type of the items in the collection (the default value
            is 'feature').
          type: string
          default: feature
        crs:
          description: The list of coordinate reference systems supported by the service
          type: array
          items:
            type: string
          default:
          - http://www.opengis.net/def/crs/OGC/1.3/CRS84
          example:
          - http://www.opengis.net/def/crs/OGC/1.3/CRS84
          - http://www.opengis.net/def/crs/EPSG/0/4326
        example:
          title: The new title of the collection
    roles:
      type: array
      items:
        type: string
      description: Purposes of the asset
      example:
      - thumbnail
    title:
      type: string
      description: Displayed title
      example: Thumbnail
    type:
      type: string
      description: Media type of the asset
      example: image/png
    itemIdUpdate:
      description: >-
        Item identifier (unique per collection. If it doesn't match the `featureId`
        in path parameters, then the Item is renamed.
      example: smr200-200-4-2019
      type: string
paths:
  /:
    get:
      description: >-
        The landing page provides links to the API definition, the conformance statements
        and to the feature collections in this dataset.
      operationId: getLandingPage
      responses:
        "200":
          $ref: "#/components/responses/LandingPage"
        "500":
          $ref: "#/components/responses/ServerError"
      summary: Landing page
      tags:
      - Capabilities
  /collections:
    get:
      operationId: getCollections
      parameters:
      - $ref: "#/components/parameters/collectionsLimit"
      responses:
        "200":
          $ref: "#/components/responses/Collections"
        "500":
          $ref: "#/components/responses/ServerError"
      summary: The feature collections in the dataset
      tags:
      - Data
    post:
      tags:
      - Data Management
      summary: >-
        Create a new collection
      operationId: createCollection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/collection"
            example:
              description: The National Map 1:200,000 is a topographic map giving
                an overview of Switzerland.
              id: ch.swisstopo.pixelkarte-farbe-pk200.noscale
              license: proprietary
              links:
              - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html
                rel: license
                title: Licence for the free geodata of the Federal Office of Topography
                  swisstopo
              - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df
                rel: describedby
              providers:
              - name: Federal Office of Topography - swisstopo
                roles:
                - producer
                - licensor
                url: https://www.swisstopo.admin.ch
              title: National Map 1:200'000
      responses:
        "201":
          description: Returns the created Collection
          headers:
            Location:
              description: A link to the collection
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/collection"
        "403":
          $ref: "#/components/responses/PermissionDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /collections/{collectionId}:
    get:
      operationId: describeCollection
      parameters:
      - $ref: "#/components/parameters/collectionId"
      - $ref: "#/components/parameters/IfMatch"
      - $ref: "#/components/parameters/IfNoneMatch"
      responses:
        "200":
          $ref: "#/components/responses/Collection"
        "304":
          $ref: "#/components/responses/NotModified"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "500":
          $ref: "#/components/responses/ServerError"
      summary: Describe the feature collection with id `collectionId`
      tags:
      - Data
    put:
      tags:
      - Data Management
      summary: >-
        Update an existing collection with Id `collectionId` with a complete collection
        definition
      operationId: updateCollection
      parameters:
      - $ref: "#/components/parameters/collectionId"
      - $ref: "#/components/parameters/IfMatchWrite"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/collection"
            example:
              description: The National Map 1:200,000 is a topographic map giving
                an overview of Switzerland.
              id: ch.swisstopo.pixelkarte-farbe-pk200.noscale
              license: proprietary
              links:
              - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html
                rel: license
                title: Licence for the free geodata of the Federal Office of Topography
                  swisstopo
              - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df
                rel: describedby
              providers:
              - name: Federal Office of Topography - swisstopo
                roles:
                - producer
                - licensor
                url: https://www.swisstopo.admin.ch
              title: National Map 1:200'000
      responses:
        "200":
          description: Returns the updated Collection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/collection"
        "403":
          $ref: "#/components/responses/PermissionDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
      - Data Management
      summary: >-
        Update an existing collection with Id `collectionId` with a partial collection
        definition
      operationId: partialUpdateCollection
      parameters:
      - $ref: "#/components/parameters/collectionId"
      - $ref: "#/components/parameters/IfMatch"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/collection"
            example:
              id: ch.swisstopo.pixelkarte-farbe-pk200.noscale
              license: proprietary
              links:
              - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html
                rel: license
                title: Licence for the free geodata of the Federal Office of Topography
                  swisstopo
              - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df
                rel: describedby
              providers:
              - name: Federal Office of Topography - swisstopo
                roles:
                - producer
                - licensor
                url: https://www.swisstopo.admin.ch
              title: National Map 1:200'000
      responses:
        "200":
          description: Returns the updated Collection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/collection"
        "403":
          $ref: "#/components/responses/PermissionDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "500":
          $ref: "#/components/responses/ServerError"
  /collections/{collectionId}/items:
    get:
      description: >-
        Fetch features of the feature collection with id `collectionId`.


        Every feature in a dataset belongs to a collection. A dataset may consist
        of multiple feature collections. A feature collection is often a collection
        of features of a similar type, based on a common schema.


        Use content negotiation to request HTML or GeoJSON.
      operationId: getFeatures
      parameters:
      - $ref: "#/components/parameters/collectionId"
      - $ref: "#/components/parameters/itemsLimit"
      - $ref: "#/components/parameters/bbox"
      - $ref: "#/components/parameters/datetime"
      responses:
        "200":
          $ref: "#/components/responses/Features"
        "400":
          $ref: "#/components/responses/InvalidParameter"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
      summary: Fetch features
      tags:
      - Data
    post:
      summary: Add a new feature to a collection
      description: Create a new feature/item in a specific collection
      operationId: postFeature
      tags:
      - Data Management
      parameters:
      - $ref: "#/components/parameters/collectionId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createItem"
            example:
              type: Feature
              id: CS3-20160503_132131_05
              geometry:
                type: Polygon
                coordinates:
                - - - -122.308150179
                    - 37.488035566
                  - - -122.597502109
                    - 37.538869539
                  - - -122.576687533
                    - 37.613537207
                  - - -122.2880486
                    - 37.562818007
                  - - -122.308150179
                    - 37.488035566
              properties:
                datetime: "2016-05-03T13:22:30.040Z"
                title: A CS3 item
                license: PDDL-1.0
                providers:
                - name: CoolSat
                  roles:
                  - producer
                  - licensor
                  url: https://cool-sat.com/
                view:sun_azimuth: 168.7
                eo:cloud_cover: 0.12
                view:off_nadir: 1.4
                platform: coolsat2
                instruments:
                - cool_sensor_v1
                view:sun_elevation: 33.4
              collection: CS3
              links:
              - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html
                rel: license
                title: Licence for the free geodata of the Federal Office of Topography
                  swisstopo
              - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df
                rel: describedby
      responses:
        "201":
          description: Return the created Item.
          headers:
            Location:
              description: A link to the item
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/PermissionDenied"
        5XX:
          $ref: "#/components/responses/ServerError"
  /collections/{collectionId}/items/{featureId}:
    get:
      description: >-
        Fetch the feature with id `featureId` in the feature collection with id `collectionId`.


        Use content negotiation to request HTML or GeoJSON.
      operationId: getFeature
      parameters:
      - $ref: "#/components/parameters/collectionId"
      - $ref: "#/components/parameters/featureId"
      - $ref: "#/components/parameters/IfMatch"
      - $ref: "#/components/parameters/IfNoneMatch"
      responses:
        "200":
          $ref: "#/components/responses/Feature"
        "304":
          $ref: "#/components/responses/NotModified"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "500":
          $ref: "#/components/responses/ServerError"
      summary: Fetch a single feature
      tags:
      - Data
    put:
      summary: Update an existing feature by Id with a complete item definition
      description: >-
        Use this method to update an existing feature. Requires the entire JSON description
        be submitted.


        *NOTE: Optional fields that are not part of the PUT payload, will be erased
        in the resource. For example if the resource as a properties.title and the
        PUT payload doesn't, then the resource properties.title will be removed.*
      operationId: putFeature
      tags:
      - Data Management
      parameters:
      - $ref: "#/components/parameters/collectionId"
      - $ref: "#/components/parameters/featureId"
      - $ref: "#/components/parameters/IfMatchWrite"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateItem"
            example:
              type: Feature
              id: CS3-20160503_132131_05
              geometry:
                type: Polygon
                coordinates:
                - - - -122.308150179
                    - 37.488035566
                  - - -122.597502109
                    - 37.538869539
                  - - -122.576687533
                    - 37.613537207
                  - - -122.2880486
                    - 37.562818007
                  - - -122.308150179
                    - 37.488035566
              properties:
                datetime: "2016-05-03T13:22:30.040Z"
                title: A CS3 item
                license: PDDL-1.0
                providers:
                - name: CoolSat
                  roles:
                  - producer
                  - licensor
                  url: https://cool-sat.com/
                view:sun_azimuth: 168.7
                eo:cloud_cover: 0.12
                view:off_nadir: 1.4
                platform: coolsat2
                instruments:
                - cool_sensor_v1
                view:sun_elevation: 33.4
              collection: CS3
              links:
              - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html
                rel: license
                title: Licence for the free geodata of the Federal Office of Topography
                  swisstopo
              - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df
                rel: describedby
      responses:
        "200":
          description: Returns the updated Item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/PermissionDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        5XX:
          $ref: "#/components/responses/ServerError"
    patch:
      summary: Update an existing feature by Id with a partial item definition
      description: >-
        Use this method to update an existing feature. Requires a JSON fragment (containing
        the fields to be updated) be submitted.
      operationId: patchFeature
      tags:
      - Data Management
      parameters:
      - $ref: "#/components/parameters/collectionId"
      - $ref: "#/components/parameters/featureId"
      - $ref: "#/components/parameters/IfMatchWrite"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/partialItem"
      responses:
        "200":
          description: Returns the updated Item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/PermissionDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        5XX:
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete an existing feature by Id
      description: Use this method to delete an existing feature/item.
      operationId: deleteFeature
      tags:
      - Data Management
      parameters:
      - $ref: "#/components/parameters/collectionId"
      - $ref: "#/components/parameters/featureId"
      - $ref: "#/components/parameters/IfMatchWrite"
      responses:
        "200":
          $ref: "#/components/responses/DeletedResource"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        5XX:
          $ref: "#/components/responses/ServerError"
  /conformance:
    get:
      description: >-
        A list of all conformance classes specified in a standard that the server
        conforms to.
      operationId: getConformanceDeclaration
      responses:
        "200":
          $ref: "#/components/responses/ConformanceDeclaration"
        "500":
          $ref: "#/components/responses/ServerError"
      summary: Information about specifications that this API conforms to
      tags:
      - Capabilities
  /search:
    get:
      description: >-
        Retrieve Items matching filters. Intended as a shorthand API for simple queries.
      operationId: getSearchSTAC
      parameters:
      - $ref: "#/components/parameters/query"
      - $ref: "#/components/parameters/bbox"
      - $ref: "#/components/parameters/datetime"
      - $ref: "#/components/parameters/limit"
      - $ref: "#/components/parameters/ids"
      - $ref: "#/components/parameters/collectionsArray"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/itemCollection"
            text/html:
              schema:
                type: string
          description: A feature collection.
        "500":
          $ref: "#/components/responses/ServerError"
      summary: Search STAC items with simple filtering.
      tags:
      - STAC
    post:
      description: >-
        Retrieve items matching filters. Intended as the standard, full-featured query
        API.
      operationId: postSearchSTAC
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/searchBody"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/itemCollection"
            text/html:
              schema:
                type: string
          description: A feature collection.
        "500":
          $ref: "#/components/responses/ServerError"
      summary: Search STAC items with full-featured filtering.
      tags:
      - STAC
  /collections/{collectionId}/items/{featureId}/assets:
    get:
      description: >-
        Fetch assets of the item with id `featureId`.

        Every asset belongs to an item.
      operationId: getAssets
      parameters:
      - $ref: "#/components/parameters/collectionId"
      - $ref: "#/components/parameters/featureId"
      responses:
        "200":
          $ref: "#/components/responses/Assets"
        "400":
          $ref: "#/components/responses/InvalidParameter"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
      summary: Fetch all assets for a feature
      tags:
      - Data
    post:
      summary: Add a new asset to a feature
      description: >-
        Create a new asset for a specific feature.


        When creating a new asset for a feature, the metadata of the asset is posted
        to the API. The Asset object itself must be already publicly available at
        the following URL: https://data.geo.admin.ch/{collectionId}/{featureId}/{assetId}

        Optionally the Asset object multihash can be given for sanity check.
      operationId: postAsset
      tags:
      - Data Management
      parameters:
      - $ref: "#/components/parameters/collectionId"
      - $ref: "#/components/parameters/featureId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/itemAssetWrite"
      responses:
        "201":
          description: Return the created Asset
          headers:
            Location:
              description: A link to the asset
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/itemAsset"
        "400":
          $ref: "#/components/responses/BadRequest"
        5XX:
          $ref: "#/components/responses/ServerError"
  /collections/{collectionId}/items/{featureId}/assets/{assetId}:
    get:
      description: >-
        Fetch the asset with id `assetId` of the feature with id `featureId` in the
        feature collection with id `collectionId`.
      operationId: getAsset
      parameters:
      - $ref: "#/components/parameters/collectionId"
      - $ref: "#/components/parameters/featureId"
      - $ref: "#/components/parameters/assetId"
      - $ref: "#/components/parameters/IfMatch"
      - $ref: "#/components/parameters/IfNoneMatch"
      responses:
        "200":
          $ref: "#/components/responses/Asset"
        "304":
          $ref: "#/components/responses/NotModified"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        "500":
          $ref: "#/components/responses/ServerError"
      summary: Fetch a single asset
      tags:
      - Data
    put:
      summary: Update an existing asset by Id with a complete asset definition
      description: >-
        Use this method to update an existing asset. Requires the entire JSON  description
        be submitted.
      operationId: putAsset
      tags:
      - Data Management
      parameters:
      - $ref: "#/components/parameters/collectionId"
      - $ref: "#/components/parameters/featureId"
      - $ref: "#/components/parameters/assetId"
      - $ref: "#/components/parameters/IfMatchWrite"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/itemAssetUpdate"
      responses:
        "200":
          description: Status of the update request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/itemAsset"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        5XX:
          $ref: "#/components/responses/ServerError"
    patch:
      summary: Update an existing asset by Id with a partial asset definition
      description: >-
        Use this method to update an existing asset. Requires a JSON fragment (containing
        the fields to be updated) be submitted.
      operationId: patchAsset
      tags:
      - Data Management
      parameters:
      - $ref: "#/components/parameters/collectionId"
      - $ref: "#/components/parameters/featureId"
      - $ref: "#/components/parameters/assetId"
      - $ref: "#/components/parameters/IfMatchWrite"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/itemAssetPartialUpdate"
      responses:
        "200":
          description: Status of the update request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/itemAsset"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        5XX:
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete an existing asset by Id
      description: >-
        Use this method to delete an existing asset.


        **NOTE: Asset file on S3 will be also removed !**
      operationId: deleteAsset
      tags:
      - Data Management
      parameters:
      - $ref: "#/components/parameters/collectionId"
      - $ref: "#/components/parameters/featureId"
      - $ref: "#/components/parameters/assetId"
      - $ref: "#/components/parameters/IfMatchWrite"
      responses:
        "200":
          $ref: "#/components/responses/DeletedResource"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "412":
          $ref: "#/components/responses/PreconditionFailed"
        5XX:
          $ref: "#/components/responses/ServerError"
  /get-token:
    post:
      tags:
      - Data Management
      summary: >-
        Request token for token authentication.
      operationId: getToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  decscription: name of user for whom token is requested
                password:
                  type: string
                  description: password of user for whom token is requested
              required:
              - username
              - password
            example:
              username: "Mickey Mouse"
              password: "I_love_Minnie_Mouse"
      responses:
        "200":
          description: Returns the token for the specified user
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: generated token for specified user
              example:
                token: ccecf40693bfc52ba090cd46eb7f19e723fe831f
        "400":
          description: Wrong credentials were provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  description:
                    type: string
              example:
                code: 400
                description: "Unable to log in with provided credentials."
